create web directory ./checkpoints/concatCG3rdloss/web...
learning rate 0.0002000 -> 0.0002000
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/torch/optim/lr_scheduler.py:136: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 100, time: 0.481, data: 1.055) D_A: 1.047 G_A: 1.802 D: 0.898 cycle_A: 4.463 idt_A: 0.000 D_B: 0.522 G_B: 0.568 cycle_B: 1.422 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 200, time: 0.486, data: 0.004) D_A: 0.520 G_A: 1.041 D: 0.679 cycle_A: 3.881 idt_A: 0.000 D_B: 0.652 G_B: 0.586 cycle_B: 0.868 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 300, time: 0.489, data: 0.008) D_A: 0.456 G_A: 0.627 D: 0.775 cycle_A: 3.268 idt_A: 0.000 D_B: 0.418 G_B: 0.566 cycle_B: 0.726 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
model_get_current_visuals: OrderedDict([('fake_B', tensor([[[[0.9998, 0.9996, 0.9628,  ..., 0.9987, 0.9241, 0.9889],
          [0.9941, 0.9997, 0.9989,  ..., 0.9944, 0.9861, 0.9863],
          [0.9994, 0.9993, 0.9597,  ..., 0.9950, 0.9650, 0.9880],
          ...,
          [0.9949, 0.9964, 0.9969,  ..., 0.9832, 0.9888, 0.9855],
          [0.9951, 0.9985, 0.9035,  ..., 0.9924, 0.8954, 0.9892],
          [0.9882, 0.9967, 0.9921,  ..., 0.9744, 0.9514, 0.9240]],
         [[0.9981, 0.9896, 0.9974,  ..., 0.9961, 0.9824, 0.9957],
          [0.9835, 0.9970, 0.9936,  ..., 0.9945, 0.9829, 0.9717],
          [0.9997, 0.9188, 0.9989,  ..., 0.9657, 0.9952, 0.9954],
          ...,
          [0.9840, 0.9978, 0.9581,  ..., 0.9846, 0.9493, 0.9768],
          [0.9970, 0.9660, 0.9924,  ..., 0.9881, 0.9642, 0.9852],
          [0.9956, 0.9649, 0.9822,  ..., 0.9472, 0.9669, 0.9033]],
         [[0.9849, 0.9991, 0.9982,  ..., 0.9948, 0.9912, 0.9969],
          [0.9984, 0.9993, 0.9967,  ..., 0.9975, 0.9733, 0.9809],
          [0.9993, 0.9993, 0.9979,  ..., 0.9755, 0.9938, 0.9935],
          ...,
          [0.9955, 0.9947, 0.9952,  ..., 0.9754, 0.9605, 0.9685],
          [0.9933, 0.9944, 0.9916,  ..., 0.9651, 0.9704, 0.9879],
          [0.9917, 0.9790, 0.9496,  ..., 0.9822, 0.9479, 0.9492]]]],
       device='cuda:0', grad_fn=<TanhBackward0>)), ('real_B', tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]]], device='cuda:0')), ('rec_B', tensor([[[[0.9996, 0.9984, 0.9716,  ..., 0.9969, 0.9881, 0.9953],
          [0.9901, 0.9985, 0.9969,  ..., 0.9900, 0.9825, 0.9891],
          [0.9971, 0.9979, 0.9623,  ..., 0.9923, 0.9913, 0.9928],
          ...,
          [0.9889, 0.9841, 0.9903,  ..., 0.9857, 0.9900, 0.9861],
          [0.9914, 0.9979, 0.9085,  ..., 0.9949, 0.9733, 0.9928],
          [0.9819, 0.9848, 0.9826,  ..., 0.9707, 0.9630, 0.9519]],
         [[0.9980, 0.9851, 0.9957,  ..., 0.9966, 0.9921, 0.9959],
          [0.9846, 0.9980, 0.9946,  ..., 0.9911, 0.9943, 0.9915],
          [0.9987, 0.9632, 0.9956,  ..., 0.9924, 0.9896, 0.9892],
          ...,
          [0.9838, 0.9968, 0.9765,  ..., 0.9862, 0.9592, 0.9788],
          [0.9921, 0.9862, 0.9817,  ..., 0.9937, 0.9822, 0.9896],
          [0.9951, 0.9806, 0.9814,  ..., 0.9710, 0.9822, 0.9509]],
         [[0.9863, 0.9978, 0.9936,  ..., 0.9847, 0.9946, 0.9952],
          [0.9965, 0.9983, 0.9927,  ..., 0.9957, 0.9870, 0.9847],
          [0.9982, 0.9987, 0.9911,  ..., 0.9736, 0.9773, 0.9872],
          ...,
          [0.9907, 0.9876, 0.9834,  ..., 0.9882, 0.9760, 0.9684],
          [0.9867, 0.9902, 0.9759,  ..., 0.9752, 0.9794, 0.9903],
          [0.9917, 0.9846, 0.9819,  ..., 0.9836, 0.9819, 0.9733]]],
        [[[0.9984, 0.9943, 0.9447,  ..., 0.9924, 0.9912, 0.9937],
          [0.9907, 0.9957, 0.9930,  ..., 0.9910, 0.9878, 0.9846],
          [0.9897, 0.9924, 0.9460,  ..., 0.9903, 0.9840, 0.9882],
          ...,
          [0.9836, 0.9692, 0.9862,  ..., 0.9792, 0.9865, 0.9765],
          [0.9758, 0.9940, 0.8119,  ..., 0.9908, 0.9703, 0.9892],
          [0.9627, 0.9768, 0.9646,  ..., 0.9631, 0.9526, 0.9394]],
         [[0.9964, 0.9840, 0.9879,  ..., 0.9975, 0.9909, 0.9949],
          [0.9780, 0.9933, 0.9896,  ..., 0.9897, 0.9968, 0.9891],
          [0.9973, 0.9175, 0.9837,  ..., 0.9940, 0.9839, 0.9818],
          ...,
          [0.9784, 0.9936, 0.9742,  ..., 0.9823, 0.9462, 0.9748],
          [0.9800, 0.9688, 0.9654,  ..., 0.9915, 0.9721, 0.9776],
          [0.9885, 0.9597, 0.9691,  ..., 0.9631, 0.9772, 0.9361]],
         [[0.9777, 0.9955, 0.9873,  ..., 0.9861, 0.9931, 0.9943],
          [0.9941, 0.9947, 0.9720,  ..., 0.9952, 0.9797, 0.9779],
          [0.9949, 0.9942, 0.9790,  ..., 0.9793, 0.9707, 0.9823],
          ...,
          [0.9809, 0.9816, 0.9571,  ..., 0.9819, 0.9553, 0.9601],
          [0.9752, 0.9812, 0.9545,  ..., 0.9692, 0.9740, 0.9834],
          [0.9765, 0.9659, 0.9635,  ..., 0.9773, 0.9771, 0.9636]]],
        [[[0.9997, 0.9985, 0.9799,  ..., 0.9974, 0.9915, 0.9950],
          [0.9916, 0.9990, 0.9979,  ..., 0.9901, 0.9841, 0.9887],
          [0.9974, 0.9980, 0.9767,  ..., 0.9955, 0.9939, 0.9958],
          ...,
          [0.9892, 0.9890, 0.9921,  ..., 0.9882, 0.9928, 0.9898],
          [0.9946, 0.9985, 0.9377,  ..., 0.9967, 0.9785, 0.9951],
          [0.9880, 0.9891, 0.9866,  ..., 0.9763, 0.9716, 0.9585]],
         [[0.9981, 0.9888, 0.9978,  ..., 0.9972, 0.9932, 0.9963],
          [0.9875, 0.9986, 0.9960,  ..., 0.9949, 0.9964, 0.9929],
          [0.9988, 0.9854, 0.9969,  ..., 0.9955, 0.9942, 0.9925],
          ...,
          [0.9844, 0.9972, 0.9776,  ..., 0.9894, 0.9676, 0.9831],
          [0.9946, 0.9916, 0.9844,  ..., 0.9957, 0.9865, 0.9930],
          [0.9971, 0.9863, 0.9851,  ..., 0.9770, 0.9856, 0.9629]],
         [[0.9921, 0.9977, 0.9959,  ..., 0.9875, 0.9964, 0.9970],
          [0.9963, 0.9987, 0.9962,  ..., 0.9970, 0.9896, 0.9887],
          [0.9988, 0.9989, 0.9932,  ..., 0.9804, 0.9838, 0.9898],
          ...,
          [0.9931, 0.9912, 0.9887,  ..., 0.9923, 0.9821, 0.9764],
          [0.9905, 0.9939, 0.9839,  ..., 0.9830, 0.9848, 0.9926],
          [0.9938, 0.9886, 0.9880,  ..., 0.9876, 0.9872, 0.9803]]],
        [[[0.9997, 0.9983, 0.9756,  ..., 0.9967, 0.9934, 0.9950],
          [0.9928, 0.9986, 0.9975,  ..., 0.9929, 0.9910, 0.9899],
          [0.9974, 0.9978, 0.9744,  ..., 0.9947, 0.9923, 0.9927],
          ...,
          [0.9889, 0.9835, 0.9912,  ..., 0.9874, 0.9916, 0.9881],
          [0.9929, 0.9982, 0.9274,  ..., 0.9957, 0.9764, 0.9937],
          [0.9844, 0.9856, 0.9836,  ..., 0.9738, 0.9672, 0.9555]],
         [[0.9981, 0.9882, 0.9961,  ..., 0.9983, 0.9943, 0.9965],
          [0.9858, 0.9982, 0.9952,  ..., 0.9948, 0.9969, 0.9927],
          [0.9988, 0.9722, 0.9956,  ..., 0.9957, 0.9915, 0.9919],
          ...,
          [0.9854, 0.9970, 0.9814,  ..., 0.9875, 0.9618, 0.9813],
          [0.9921, 0.9898, 0.9828,  ..., 0.9947, 0.9839, 0.9911],
          [0.9961, 0.9841, 0.9835,  ..., 0.9731, 0.9839, 0.9565]],
         [[0.9884, 0.9979, 0.9953,  ..., 0.9895, 0.9965, 0.9973],
          [0.9966, 0.9984, 0.9934,  ..., 0.9969, 0.9867, 0.9862],
          [0.9987, 0.9986, 0.9908,  ..., 0.9841, 0.9828, 0.9890],
          ...,
          [0.9898, 0.9895, 0.9834,  ..., 0.9901, 0.9784, 0.9713],
          [0.9883, 0.9922, 0.9812,  ..., 0.9771, 0.9819, 0.9915],
          [0.9925, 0.9875, 0.9841,  ..., 0.9856, 0.9847, 0.9763]]],
        [[[0.9984, 0.9941, 0.9358,  ..., 0.9918, 0.9928, 0.9935],
          [0.9935, 0.9958, 0.9950,  ..., 0.9916, 0.9925, 0.9864],
          [0.9891, 0.9907, 0.9492,  ..., 0.9936, 0.9845, 0.9885],
          ...,
          [0.9854, 0.9698, 0.9855,  ..., 0.9802, 0.9870, 0.9770],
          [0.9736, 0.9932, 0.8186,  ..., 0.9910, 0.9711, 0.9894],
          [0.9620, 0.9756, 0.9605,  ..., 0.9652, 0.9555, 0.9400]],
         [[0.9965, 0.9863, 0.9894,  ..., 0.9979, 0.9884, 0.9949],
          [0.9817, 0.9938, 0.9908,  ..., 0.9909, 0.9981, 0.9884],
          [0.9970, 0.9169, 0.9860,  ..., 0.9950, 0.9794, 0.9838],
          ...,
          [0.9772, 0.9932, 0.9757,  ..., 0.9833, 0.9474, 0.9755],
          [0.9787, 0.9705, 0.9671,  ..., 0.9922, 0.9730, 0.9779],
          [0.9884, 0.9590, 0.9750,  ..., 0.9643, 0.9778, 0.9388]],
         [[0.9796, 0.9950, 0.9867,  ..., 0.9866, 0.9940, 0.9945],
          [0.9945, 0.9945, 0.9680,  ..., 0.9968, 0.9821, 0.9784],
          [0.9955, 0.9935, 0.9814,  ..., 0.9855, 0.9717, 0.9866],
          ...,
          [0.9806, 0.9832, 0.9523,  ..., 0.9828, 0.9553, 0.9611],
          [0.9774, 0.9831, 0.9498,  ..., 0.9701, 0.9750, 0.9836],
          [0.9762, 0.9690, 0.9660,  ..., 0.9777, 0.9774, 0.9656]]]],
       device='cuda:0', grad_fn=<TanhBackward0>))])
tensor_visual: torch.Size([1, 3, 256, 256])
image_numpy_visual: torch.Size([1, 3, 256, 256])
tensor_visual: torch.Size([5, 3, 256, 256])
image_numpy_visual: torch.Size([5, 3, 256, 256])
tensor_visual: torch.Size([5, 3, 256, 256])
image_numpy_visual: torch.Size([5, 3, 256, 256])
len_images: 3
shape of each image: [(3, 256, 256), (3, 256, 256), (3, 256, 256)]
vim shape: (3, 3, 256, 256)
after mod vim shape: (3, 3, 256, 256)
(epoch: 1, iters: 400, time: 0.884, data: 0.003) D_A: 0.213 G_A: 0.345 D: 0.373 cycle_A: 4.222 idt_A: 0.000 D_B: 0.392 G_B: 0.528 cycle_B: 0.606 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 500, time: 0.489, data: 0.003) D_A: 0.532 G_A: 0.418 D: 0.384 cycle_A: 6.210 idt_A: 0.000 D_B: 0.271 G_B: 0.495 cycle_B: 0.633 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 600, time: 0.490, data: 0.003) D_A: 0.303 G_A: 0.154 D: 0.334 cycle_A: 3.128 idt_A: 0.000 D_B: 0.292 G_B: 0.337 cycle_B: 0.528 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 700, time: 0.488, data: 0.003) D_A: 0.250 G_A: 0.135 D: 0.287 cycle_A: 2.635 idt_A: 0.000 D_B: 0.297 G_B: 0.525 cycle_B: 0.623 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
model_get_current_visuals: OrderedDict([('fake_B', tensor([[[[1.0000, 1.0000, 0.9997,  ..., 0.9999, 0.9992, 0.9995],
          [0.9997, 0.9999, 1.0000,  ..., 0.9993, 0.9984, 0.9996],
          [0.9998, 1.0000, 0.9994,  ..., 0.9999, 0.9983, 0.9998],
          ...,
          [0.9935, 0.9889, 0.9925,  ..., 0.9927, 0.9888, 0.9915],
          [0.9929, 0.9977, 0.9910,  ..., 0.9989, 0.9904, 0.9961],
          [0.9959, 0.9945, 0.9890,  ..., 0.9938, 0.9792, 0.9868]],
         [[0.9997, 0.9995, 0.9999,  ..., 0.9997, 0.9993, 0.9997],
          [0.9999, 0.9999, 0.9996,  ..., 0.9997, 0.9994, 0.9995],
          [0.9999, 0.9995, 1.0000,  ..., 0.9968, 0.9999, 0.9998],
          ...,
          [0.9969, 0.9954, 0.9907,  ..., 0.9927, 0.9852, 0.9897],
          [0.9915, 0.9907, 0.9958,  ..., 0.9960, 0.9907, 0.9959],
          [0.9993, 0.9908, 0.9944,  ..., 0.9904, 0.9958, 0.9873]],
         [[1.0000, 0.9999, 1.0000,  ..., 0.9997, 0.9999, 0.9997],
          [0.9999, 0.9999, 0.9999,  ..., 0.9999, 0.9995, 0.9995],
          [1.0000, 1.0000, 1.0000,  ..., 0.9994, 0.9998, 0.9998],
          ...,
          [0.9963, 0.9968, 0.9943,  ..., 0.9966, 0.9895, 0.9925],
          [0.9987, 0.9974, 0.9985,  ..., 0.9971, 0.9956, 0.9949],
          [0.9985, 0.9937, 0.9950,  ..., 0.9946, 0.9977, 0.9948]]]],
       device='cuda:0', grad_fn=<TanhBackward0>)), ('real_B', tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]]], device='cuda:0')), ('rec_B', tensor([[[[1.0000, 0.9998, 0.9996,  ..., 0.9997, 0.9963, 0.9988],
          [0.9996, 0.9999, 0.9999,  ..., 0.9980, 0.9946, 0.9989],
          [0.9997, 0.9999, 0.9988,  ..., 0.9994, 0.9955, 0.9993],
          ...,
          [0.9941, 0.9968, 0.9967,  ..., 0.9938, 0.9887, 0.9936],
          [0.9952, 0.9984, 0.9928,  ..., 0.9988, 0.9907, 0.9967],
          [0.9946, 0.9954, 0.9949,  ..., 0.9938, 0.9777, 0.9877]],
         [[0.9995, 0.9994, 0.9998,  ..., 0.9987, 0.9976, 0.9989],
          [0.9996, 0.9998, 0.9995,  ..., 0.9991, 0.9972, 0.9988],
          [0.9999, 0.9990, 0.9999,  ..., 0.9935, 0.9990, 0.9994],
          ...,
          [0.9944, 0.9961, 0.9928,  ..., 0.9924, 0.9889, 0.9885],
          [0.9964, 0.9923, 0.9950,  ..., 0.9961, 0.9902, 0.9964],
          [0.9993, 0.9914, 0.9951,  ..., 0.9899, 0.9952, 0.9864]],
         [[0.9999, 0.9999, 1.0000,  ..., 0.9993, 0.9998, 0.9988],
          [0.9998, 0.9999, 0.9999,  ..., 0.9999, 0.9987, 0.9987],
          [1.0000, 1.0000, 1.0000,  ..., 0.9982, 0.9996, 0.9996],
          ...,
          [0.9944, 0.9972, 0.9971,  ..., 0.9965, 0.9866, 0.9921],
          [0.9984, 0.9973, 0.9984,  ..., 0.9971, 0.9947, 0.9958],
          [0.9976, 0.9927, 0.9912,  ..., 0.9946, 0.9977, 0.9936]]],
        [[[1.0000, 0.9999, 0.9996,  ..., 0.9997, 0.9963, 0.9987],
          [0.9996, 0.9999, 0.9999,  ..., 0.9980, 0.9942, 0.9988],
          [0.9997, 0.9999, 0.9988,  ..., 0.9994, 0.9952, 0.9993],
          ...,
          [0.9954, 0.9974, 0.9971,  ..., 0.9934, 0.9878, 0.9934],
          [0.9960, 0.9988, 0.9936,  ..., 0.9987, 0.9901, 0.9963],
          [0.9956, 0.9966, 0.9962,  ..., 0.9933, 0.9760, 0.9867]],
         [[0.9995, 0.9993, 0.9998,  ..., 0.9986, 0.9977, 0.9989],
          [0.9996, 0.9998, 0.9995,  ..., 0.9990, 0.9970, 0.9987],
          [0.9999, 0.9989, 0.9999,  ..., 0.9926, 0.9989, 0.9993],
          ...,
          [0.9957, 0.9972, 0.9943,  ..., 0.9921, 0.9882, 0.9878],
          [0.9975, 0.9916, 0.9957,  ..., 0.9957, 0.9897, 0.9961],
          [0.9995, 0.9926, 0.9958,  ..., 0.9897, 0.9948, 0.9853]],
         [[0.9999, 0.9999, 0.9999,  ..., 0.9992, 0.9998, 0.9987],
          [0.9998, 0.9999, 0.9999,  ..., 0.9999, 0.9987, 0.9987],
          [1.0000, 1.0000, 1.0000,  ..., 0.9979, 0.9996, 0.9996],
          ...,
          [0.9961, 0.9977, 0.9978,  ..., 0.9962, 0.9855, 0.9915],
          [0.9987, 0.9980, 0.9989,  ..., 0.9970, 0.9944, 0.9956],
          [0.9982, 0.9935, 0.9921,  ..., 0.9943, 0.9975, 0.9932]]],
        [[[0.9999, 0.9998, 0.9996,  ..., 0.9998, 0.9965, 0.9988],
          [0.9996, 0.9999, 0.9999,  ..., 0.9980, 0.9946, 0.9990],
          [0.9997, 0.9999, 0.9988,  ..., 0.9994, 0.9959, 0.9994],
          ...,
          [0.9945, 0.9968, 0.9968,  ..., 0.9943, 0.9894, 0.9942],
          [0.9954, 0.9984, 0.9937,  ..., 0.9990, 0.9917, 0.9971],
          [0.9947, 0.9953, 0.9949,  ..., 0.9945, 0.9794, 0.9888]],
         [[0.9995, 0.9994, 0.9998,  ..., 0.9987, 0.9976, 0.9990],
          [0.9996, 0.9998, 0.9995,  ..., 0.9992, 0.9973, 0.9989],
          [0.9999, 0.9991, 0.9999,  ..., 0.9940, 0.9990, 0.9994],
          ...,
          [0.9948, 0.9960, 0.9932,  ..., 0.9930, 0.9898, 0.9894],
          [0.9966, 0.9935, 0.9955,  ..., 0.9965, 0.9910, 0.9967],
          [0.9994, 0.9914, 0.9952,  ..., 0.9907, 0.9956, 0.9879]],
         [[0.9999, 0.9999, 1.0000,  ..., 0.9993, 0.9998, 0.9989],
          [0.9998, 0.9999, 0.9999,  ..., 0.9999, 0.9987, 0.9988],
          [1.0000, 1.0000, 1.0000,  ..., 0.9983, 0.9996, 0.9996],
          ...,
          [0.9945, 0.9973, 0.9971,  ..., 0.9968, 0.9877, 0.9929],
          [0.9985, 0.9976, 0.9986,  ..., 0.9973, 0.9952, 0.9961],
          [0.9979, 0.9934, 0.9917,  ..., 0.9952, 0.9980, 0.9943]]],
        [[[1.0000, 0.9999, 0.9998,  ..., 0.9998, 0.9979, 0.9993],
          [0.9997, 0.9999, 1.0000,  ..., 0.9986, 0.9960, 0.9993],
          [0.9998, 0.9999, 0.9993,  ..., 0.9997, 0.9972, 0.9996],
          ...,
          [0.9975, 0.9988, 0.9987,  ..., 0.9957, 0.9919, 0.9959],
          [0.9979, 0.9995, 0.9969,  ..., 0.9993, 0.9937, 0.9979],
          [0.9972, 0.9982, 0.9979,  ..., 0.9956, 0.9841, 0.9912]],
         [[0.9996, 0.9996, 0.9999,  ..., 0.9992, 0.9985, 0.9994],
          [0.9998, 0.9999, 0.9997,  ..., 0.9995, 0.9982, 0.9993],
          [0.9999, 0.9995, 1.0000,  ..., 0.9956, 0.9994, 0.9996],
          ...,
          [0.9981, 0.9980, 0.9963,  ..., 0.9944, 0.9923, 0.9914],
          [0.9987, 0.9960, 0.9978,  ..., 0.9974, 0.9929, 0.9977],
          [0.9998, 0.9951, 0.9972,  ..., 0.9930, 0.9967, 0.9910]],
         [[1.0000, 0.9999, 1.0000,  ..., 0.9995, 0.9999, 0.9993],
          [0.9999, 0.9999, 0.9999,  ..., 0.9999, 0.9993, 0.9993],
          [1.0000, 1.0000, 1.0000,  ..., 0.9988, 0.9997, 0.9997],
          ...,
          [0.9977, 0.9989, 0.9988,  ..., 0.9977, 0.9914, 0.9947],
          [0.9993, 0.9992, 0.9995,  ..., 0.9981, 0.9962, 0.9970],
          [0.9993, 0.9969, 0.9960,  ..., 0.9966, 0.9987, 0.9959]]],
        [[[0.9999, 0.9998, 0.9995,  ..., 0.9997, 0.9957, 0.9986],
          [0.9995, 0.9998, 0.9999,  ..., 0.9975, 0.9935, 0.9986],
          [0.9997, 0.9999, 0.9984,  ..., 0.9993, 0.9945, 0.9992],
          ...,
          [0.9933, 0.9962, 0.9960,  ..., 0.9928, 0.9868, 0.9925],
          [0.9945, 0.9981, 0.9912,  ..., 0.9986, 0.9898, 0.9963],
          [0.9937, 0.9948, 0.9936,  ..., 0.9931, 0.9753, 0.9862]],
         [[0.9994, 0.9992, 0.9998,  ..., 0.9985, 0.9972, 0.9987],
          [0.9995, 0.9998, 0.9994,  ..., 0.9988, 0.9965, 0.9986],
          [0.9999, 0.9987, 0.9999,  ..., 0.9925, 0.9988, 0.9993],
          ...,
          [0.9933, 0.9959, 0.9919,  ..., 0.9917, 0.9874, 0.9872],
          [0.9957, 0.9905, 0.9938,  ..., 0.9957, 0.9894, 0.9959],
          [0.9992, 0.9904, 0.9945,  ..., 0.9889, 0.9944, 0.9848]],
         [[0.9999, 0.9999, 0.9999,  ..., 0.9991, 0.9997, 0.9985],
          [0.9998, 0.9998, 0.9999,  ..., 0.9998, 0.9984, 0.9985],
          [1.0000, 0.9999, 0.9999,  ..., 0.9980, 0.9996, 0.9995],
          ...,
          [0.9939, 0.9965, 0.9964,  ..., 0.9960, 0.9846, 0.9913],
          [0.9982, 0.9966, 0.9981,  ..., 0.9967, 0.9942, 0.9952],
          [0.9972, 0.9912, 0.9896,  ..., 0.9940, 0.9974, 0.9929]]]],
       device='cuda:0', grad_fn=<TanhBackward0>))])
tensor_visual: torch.Size([1, 3, 256, 256])
image_numpy_visual: torch.Size([1, 3, 256, 256])
tensor_visual: torch.Size([5, 3, 256, 256])
image_numpy_visual: torch.Size([5, 3, 256, 256])
tensor_visual: torch.Size([5, 3, 256, 256])
image_numpy_visual: torch.Size([5, 3, 256, 256])
len_images: 3
shape of each image: [(3, 256, 256), (3, 256, 256), (3, 256, 256)]
vim shape: (3, 3, 256, 256)
after mod vim shape: (3, 3, 256, 256)
(epoch: 1, iters: 800, time: 0.541, data: 0.003) D_A: 0.174 G_A: 0.380 D: 0.255 cycle_A: 4.099 idt_A: 0.000 D_B: 0.351 G_B: 0.489 cycle_B: 0.458 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 900, time: 0.488, data: 0.003) D_A: 0.294 G_A: 0.198 D: 0.270 cycle_A: 4.107 idt_A: 0.000 D_B: 0.319 G_B: 0.378 cycle_B: 0.727 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 1000, time: 0.490, data: 0.003) D_A: 0.169 G_A: 0.257 D: 0.249 cycle_A: 5.228 idt_A: 0.000 D_B: 0.212 G_B: 0.324 cycle_B: 0.472 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 1100, time: 0.489, data: 0.003) D_A: 0.253 G_A: 0.341 D: 0.317 cycle_A: 6.327 idt_A: 0.000 D_B: 0.223 G_B: 0.494 cycle_B: 0.857 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
model_get_current_visuals: OrderedDict([('fake_B', tensor([[[[1.0000, 1.0000, 1.0000,  ..., 1.0000, 0.9995, 0.9999],
          [0.9999, 1.0000, 1.0000,  ..., 0.9998, 0.9989, 0.9997],
          [0.9999, 1.0000, 0.9997,  ..., 1.0000, 0.9987, 0.9999],
          ...,
          [0.9998, 0.9999, 0.9999,  ..., 0.9990, 0.9985, 0.9985],
          [0.9997, 0.9999, 0.9986,  ..., 0.9999, 0.9963, 0.9994],
          [0.9995, 0.9998, 0.9998,  ..., 0.9980, 0.9953, 0.9954]],
         [[0.9999, 0.9998, 1.0000,  ..., 0.9999, 0.9997, 0.9998],
          [0.9999, 1.0000, 0.9998,  ..., 0.9999, 0.9983, 0.9997],
          [1.0000, 0.9998, 1.0000,  ..., 0.9978, 0.9999, 0.9997],
          ...,
          [0.9990, 0.9997, 0.9968,  ..., 0.9979, 0.9844, 0.9975],
          [0.9996, 0.9984, 0.9996,  ..., 0.9985, 0.9956, 0.9990],
          [1.0000, 0.9974, 0.9985,  ..., 0.9970, 0.9976, 0.9946]],
         [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 0.9998],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 0.9998, 0.9998],
          [1.0000, 1.0000, 1.0000,  ..., 0.9998, 1.0000, 0.9999],
          ...,
          [0.9999, 0.9999, 0.9998,  ..., 0.9993, 0.9973, 0.9978],
          [0.9999, 0.9999, 0.9999,  ..., 0.9994, 0.9992, 0.9993],
          [0.9999, 0.9991, 0.9989,  ..., 0.9973, 0.9994, 0.9977]]]],
       device='cuda:0', grad_fn=<TanhBackward0>)), ('real_B', tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]]], device='cuda:0')), ('rec_B', tensor([[[[1.0000, 1.0000, 1.0000,  ..., 0.9999, 0.9984, 0.9994],
          [0.9999, 1.0000, 1.0000,  ..., 0.9977, 0.9972, 0.9991],
          [1.0000, 1.0000, 0.9999,  ..., 0.9997, 0.9980, 0.9994],
          ...,
          [0.9995, 0.9977, 0.9987,  ..., 0.9991, 0.9985, 0.9988],
          [0.9990, 0.9997, 0.9985,  ..., 0.9999, 0.9960, 0.9994],
          [0.9989, 0.9896, 0.9988,  ..., 0.9978, 0.9949, 0.9955]],
         [[1.0000, 0.9999, 1.0000,  ..., 0.9995, 0.9988, 0.9990],
          [0.9999, 1.0000, 0.9999,  ..., 0.9996, 0.9972, 0.9989],
          [1.0000, 0.9999, 1.0000,  ..., 0.9969, 0.9990, 0.9988],
          ...,
          [0.9995, 0.9926, 0.9983,  ..., 0.9976, 0.9873, 0.9977],
          [0.9992, 0.9981, 0.9956,  ..., 0.9987, 0.9958, 0.9986],
          [0.9970, 0.9955, 0.9978,  ..., 0.9973, 0.9976, 0.9945]],
         [[1.0000, 1.0000, 1.0000,  ..., 0.9995, 0.9999, 0.9995],
          [1.0000, 1.0000, 1.0000,  ..., 0.9998, 0.9988, 0.9991],
          [1.0000, 1.0000, 1.0000,  ..., 0.9992, 0.9996, 0.9995],
          ...,
          [0.9972, 0.9810, 0.9982,  ..., 0.9993, 0.9974, 0.9973],
          [0.9962, 0.9950, 0.9959,  ..., 0.9993, 0.9989, 0.9992],
          [0.9980, 0.9930, 0.9978,  ..., 0.9980, 0.9995, 0.9976]]],
        [[[1.0000, 1.0000, 0.9998,  ..., 0.9994, 0.9945, 0.9984],
          [0.9995, 0.9999, 0.9999,  ..., 0.9944, 0.9932, 0.9972],
          [0.9996, 0.9999, 0.9987,  ..., 0.9991, 0.9942, 0.9983],
          ...,
          [0.9989, 0.9959, 0.9972,  ..., 0.9961, 0.9947, 0.9945],
          [0.9981, 0.9994, 0.9973,  ..., 0.9988, 0.9867, 0.9966],
          [0.9980, 0.9836, 0.9980,  ..., 0.9927, 0.9831, 0.9855]],
         [[0.9995, 0.9994, 0.9999,  ..., 0.9984, 0.9962, 0.9967],
          [0.9994, 0.9998, 0.9991,  ..., 0.9984, 0.9918, 0.9967],
          [0.9999, 0.9992, 0.9999,  ..., 0.9908, 0.9968, 0.9965],
          ...,
          [0.9989, 0.9906, 0.9965,  ..., 0.9928, 0.9648, 0.9911],
          [0.9984, 0.9967, 0.9928,  ..., 0.9937, 0.9834, 0.9913],
          [0.9937, 0.9926, 0.9966,  ..., 0.9918, 0.9905, 0.9845]],
         [[0.9999, 0.9999, 0.9999,  ..., 0.9985, 0.9992, 0.9982],
          [0.9999, 0.9999, 0.9998,  ..., 0.9991, 0.9961, 0.9969],
          [1.0000, 0.9999, 0.9999,  ..., 0.9965, 0.9987, 0.9981],
          ...,
          [0.9949, 0.9668, 0.9967,  ..., 0.9950, 0.9847, 0.9909],
          [0.9933, 0.9905, 0.9922,  ..., 0.9951, 0.9938, 0.9946],
          [0.9961, 0.9873, 0.9960,  ..., 0.9920, 0.9971, 0.9886]]],
        [[[0.9989, 0.9998, 0.9961,  ..., 0.9993, 0.9941, 0.9982],
          [0.9995, 0.9986, 0.9996,  ..., 0.9932, 0.9930, 0.9972],
          [0.9984, 0.9995, 0.9950,  ..., 0.9991, 0.9938, 0.9984],
          ...,
          [0.9991, 0.9965, 0.9976,  ..., 0.9963, 0.9953, 0.9953],
          [0.9983, 0.9995, 0.9974,  ..., 0.9991, 0.9883, 0.9969],
          [0.9982, 0.9873, 0.9983,  ..., 0.9933, 0.9857, 0.9870]],
         [[0.9990, 0.9980, 0.9991,  ..., 0.9982, 0.9960, 0.9966],
          [0.9982, 0.9996, 0.9939,  ..., 0.9983, 0.9918, 0.9964],
          [0.9994, 0.9980, 0.9989,  ..., 0.9906, 0.9966, 0.9958],
          ...,
          [0.9989, 0.9934, 0.9967,  ..., 0.9927, 0.9694, 0.9924],
          [0.9985, 0.9971, 0.9941,  ..., 0.9948, 0.9870, 0.9927],
          [0.9947, 0.9933, 0.9971,  ..., 0.9923, 0.9917, 0.9854]],
         [[0.9992, 0.9995, 0.9986,  ..., 0.9983, 0.9992, 0.9981],
          [0.9988, 0.9995, 0.9992,  ..., 0.9990, 0.9959, 0.9964],
          [0.9989, 0.9992, 0.9982,  ..., 0.9963, 0.9983, 0.9977],
          ...,
          [0.9956, 0.9738, 0.9974,  ..., 0.9958, 0.9866, 0.9906],
          [0.9940, 0.9921, 0.9938,  ..., 0.9960, 0.9944, 0.9958],
          [0.9961, 0.9900, 0.9967,  ..., 0.9928, 0.9974, 0.9900]]],
        [[[1.0000, 1.0000, 0.9999,  ..., 0.9999, 0.9985, 0.9996],
          [0.9999, 1.0000, 1.0000,  ..., 0.9987, 0.9975, 0.9991],
          [0.9999, 1.0000, 0.9997,  ..., 0.9998, 0.9978, 0.9995],
          ...,
          [0.9988, 0.9963, 0.9972,  ..., 0.9986, 0.9976, 0.9978],
          [0.9979, 0.9993, 0.9946,  ..., 0.9997, 0.9940, 0.9990],
          [0.9968, 0.9873, 0.9975,  ..., 0.9967, 0.9927, 0.9931]],
         [[0.9999, 0.9998, 1.0000,  ..., 0.9996, 0.9989, 0.9990],
          [0.9998, 1.0000, 0.9997,  ..., 0.9996, 0.9966, 0.9990],
          [1.0000, 0.9998, 1.0000,  ..., 0.9962, 0.9993, 0.9991],
          ...,
          [0.9984, 0.9920, 0.9955,  ..., 0.9966, 0.9818, 0.9963],
          [0.9984, 0.9965, 0.9939,  ..., 0.9977, 0.9932, 0.9974],
          [0.9944, 0.9931, 0.9952,  ..., 0.9960, 0.9962, 0.9917]],
         [[1.0000, 1.0000, 1.0000,  ..., 0.9997, 0.9998, 0.9995],
          [1.0000, 1.0000, 1.0000,  ..., 0.9998, 0.9990, 0.9991],
          [1.0000, 1.0000, 1.0000,  ..., 0.9991, 0.9998, 0.9996],
          ...,
          [0.9938, 0.9748, 0.9970,  ..., 0.9987, 0.9953, 0.9953],
          [0.9920, 0.9947, 0.9933,  ..., 0.9989, 0.9980, 0.9986],
          [0.9957, 0.9907, 0.9962,  ..., 0.9966, 0.9990, 0.9962]]],
        [[[1.0000, 1.0000, 0.9999,  ..., 0.9996, 0.9956, 0.9986],
          [0.9997, 0.9999, 1.0000,  ..., 0.9943, 0.9948, 0.9979],
          [0.9998, 1.0000, 0.9994,  ..., 0.9992, 0.9955, 0.9984],
          ...,
          [0.9996, 0.9982, 0.9988,  ..., 0.9978, 0.9971, 0.9972],
          [0.9993, 0.9998, 0.9991,  ..., 0.9995, 0.9920, 0.9982],
          [0.9993, 0.9895, 0.9992,  ..., 0.9954, 0.9904, 0.9909]],
         [[0.9998, 0.9996, 1.0000,  ..., 0.9986, 0.9969, 0.9973],
          [0.9997, 0.9999, 0.9995,  ..., 0.9988, 0.9940, 0.9973],
          [1.0000, 0.9996, 1.0000,  ..., 0.9926, 0.9972, 0.9965],
          ...,
          [0.9996, 0.9935, 0.9987,  ..., 0.9950, 0.9768, 0.9950],
          [0.9994, 0.9982, 0.9961,  ..., 0.9969, 0.9909, 0.9957],
          [0.9969, 0.9957, 0.9984,  ..., 0.9948, 0.9945, 0.9897]],
         [[1.0000, 0.9999, 1.0000,  ..., 0.9988, 0.9995, 0.9987],
          [0.9999, 1.0000, 0.9999,  ..., 0.9993, 0.9966, 0.9973],
          [1.0000, 1.0000, 1.0000,  ..., 0.9973, 0.9987, 0.9985],
          ...,
          [0.9980, 0.9791, 0.9983,  ..., 0.9976, 0.9922, 0.9941],
          [0.9968, 0.9944, 0.9961,  ..., 0.9977, 0.9969, 0.9974],
          [0.9983, 0.9924, 0.9983,  ..., 0.9954, 0.9986, 0.9936]]]],
       device='cuda:0', grad_fn=<TanhBackward0>))])
tensor_visual: torch.Size([1, 3, 256, 256])
image_numpy_visual: torch.Size([1, 3, 256, 256])
tensor_visual: torch.Size([5, 3, 256, 256])
image_numpy_visual: torch.Size([5, 3, 256, 256])
tensor_visual: torch.Size([5, 3, 256, 256])
image_numpy_visual: torch.Size([5, 3, 256, 256])
len_images: 3
shape of each image: [(3, 256, 256), (3, 256, 256), (3, 256, 256)]
vim shape: (3, 3, 256, 256)
after mod vim shape: (3, 3, 256, 256)
(epoch: 1, iters: 1200, time: 0.537, data: 0.003) D_A: 0.243 G_A: 0.612 D: 0.227 cycle_A: 2.538 idt_A: 0.000 D_B: 0.350 G_B: 0.532 cycle_B: 0.595 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 1300, time: 0.490, data: 0.003) D_A: 0.195 G_A: 0.387 D: 0.337 cycle_A: 3.824 idt_A: 0.000 D_B: 0.303 G_B: 0.242 cycle_B: 0.630 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 1400, time: 0.487, data: 0.004) D_A: 0.194 G_A: 0.372 D: 0.255 cycle_A: 3.123 idt_A: 0.000 D_B: 0.225 G_B: 0.383 cycle_B: 0.438 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 1500, time: 0.489, data: 0.004) D_A: 0.232 G_A: 0.346 D: 0.231 cycle_A: 3.027 idt_A: 0.000 D_B: 0.296 G_B: 0.469 cycle_B: 0.526 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
model_get_current_visuals: OrderedDict([('fake_B', tensor([[[[1.0000, 1.0000, 0.9998,  ..., 1.0000, 0.9997, 0.9999],
          [0.9998, 1.0000, 1.0000,  ..., 0.9999, 0.9991, 0.9998],
          [0.9993, 1.0000, 0.9874,  ..., 1.0000, 0.9876, 1.0000],
          ...,
          [0.9995, 0.9997, 0.9993,  ..., 0.9972, 0.9976, 0.9974],
          [0.9988, 0.9999, 0.9650,  ..., 0.9990, 0.9980, 0.9989],
          [0.9976, 0.9994, 0.9987,  ..., 0.9914, 0.9984, 0.9982]],
         [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 0.9999, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 0.9999, 0.9998],
          [1.0000, 0.9988, 1.0000,  ..., 0.9973, 1.0000, 0.9998],
          ...,
          [0.9990, 0.9993, 0.9947,  ..., 0.9911, 0.9990, 0.9965],
          [0.9991, 0.9730, 0.9986,  ..., 0.9884, 0.9959, 0.9968],
          [0.9998, 0.9971, 0.9976,  ..., 0.9975, 0.9957, 0.9984]],
         [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 0.9999],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 0.9999, 0.9999],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          ...,
          [0.9996, 0.9993, 0.9990,  ..., 0.9981, 0.9980, 0.9962],
          [0.9997, 0.9998, 0.9989,  ..., 0.9926, 0.9953, 0.9933],
          [0.9997, 0.9978, 0.9961,  ..., 0.9969, 0.9976, 0.9967]]]],
       device='cuda:0', grad_fn=<TanhBackward0>)), ('real_B', tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]]], device='cuda:0')), ('rec_B', tensor([[[[0.9667, 0.9998, 0.9921,  ..., 0.9986, 0.9753, 0.9945],
          [0.9995, 0.9969, 0.9996,  ..., 0.9975, 0.9969, 0.9960],
          [0.9992, 0.9989, 0.9963,  ..., 0.9914, 0.9946, 0.9947],
          ...,
          [0.9977, 0.9984, 0.9968,  ..., 0.9965, 0.9968, 0.9958],
          [0.9954, 0.9993, 0.9785,  ..., 0.9992, 0.9657, 0.9971],
          [0.9936, 0.9982, 0.9922,  ..., 0.9947, 0.9893, 0.9904]],
         [[0.9995, 0.9990, 0.9983,  ..., 0.9947, 0.9947, 0.9897],
          [0.9998, 0.9996, 0.9977,  ..., 0.9991, 0.9895, 0.9987],
          [0.9995, 0.9972, 0.9994,  ..., 0.9890, 0.9960, 0.9906],
          ...,
          [0.9976, 0.9977, 0.9909,  ..., 0.9947, 0.9898, 0.9960],
          [0.9931, 0.9917, 0.9961,  ..., 0.9824, 0.9873, 0.9876],
          [0.9993, 0.9957, 0.9930,  ..., 0.9940, 0.9965, 0.9870]],
         [[0.9994, 0.9998, 0.9993,  ..., 0.9982, 0.9982, 0.9964],
          [0.9993, 0.9995, 0.9998,  ..., 0.9988, 0.9951, 0.9952],
          [0.9994, 0.9993, 0.9994,  ..., 0.9962, 0.9969, 0.9950],
          ...,
          [0.9966, 0.9982, 0.9965,  ..., 0.9978, 0.9902, 0.9906],
          [0.9988, 0.9991, 0.9976,  ..., 0.9964, 0.9948, 0.9959],
          [0.9986, 0.9955, 0.9978,  ..., 0.9934, 0.9908, 0.9913]]],
        [[[0.9768, 0.9998, 0.9920,  ..., 0.9994, 0.9801, 0.9980],
          [0.9996, 0.9981, 0.9996,  ..., 0.9980, 0.9979, 0.9982],
          [0.9990, 0.9990, 0.9951,  ..., 0.9984, 0.9964, 0.9992],
          ...,
          [0.9994, 0.9997, 0.9996,  ..., 0.9981, 0.9982, 0.9981],
          [0.9990, 0.9999, 0.9945,  ..., 0.9998, 0.9807, 0.9987],
          [0.9974, 0.9995, 0.9983,  ..., 0.9972, 0.9931, 0.9947]],
         [[0.9994, 0.9988, 0.9989,  ..., 0.9959, 0.9967, 0.9977],
          [0.9998, 0.9997, 0.9968,  ..., 0.9994, 0.9956, 0.9994],
          [0.9996, 0.9977, 0.9995,  ..., 0.9923, 0.9988, 0.9974],
          ...,
          [0.9994, 0.9988, 0.9984,  ..., 0.9968, 0.9934, 0.9977],
          [0.9989, 0.9984, 0.9993,  ..., 0.9930, 0.9941, 0.9954],
          [0.9999, 0.9982, 0.9984,  ..., 0.9968, 0.9982, 0.9935]],
         [[0.9995, 0.9998, 0.9994,  ..., 0.9991, 0.9994, 0.9984],
          [0.9992, 0.9997, 0.9998,  ..., 0.9997, 0.9975, 0.9983],
          [0.9995, 0.9994, 0.9987,  ..., 0.9985, 0.9986, 0.9984],
          ...,
          [0.9993, 0.9997, 0.9994,  ..., 0.9994, 0.9955, 0.9951],
          [0.9999, 0.9999, 0.9998,  ..., 0.9986, 0.9981, 0.9984],
          [0.9999, 0.9993, 0.9996,  ..., 0.9974, 0.9972, 0.9960]]],
        [[[0.9708, 0.9998, 0.9937,  ..., 0.9987, 0.9793, 0.9953],
          [0.9996, 0.9975, 0.9996,  ..., 0.9980, 0.9974, 0.9966],
          [0.9992, 0.9990, 0.9970,  ..., 0.9921, 0.9953, 0.9954],
          ...,
          [0.9985, 0.9992, 0.9982,  ..., 0.9972, 0.9975, 0.9964],
          [0.9975, 0.9997, 0.9859,  ..., 0.9994, 0.9672, 0.9976],
          [0.9949, 0.9989, 0.9949,  ..., 0.9958, 0.9912, 0.9916]],
         [[0.9996, 0.9990, 0.9984,  ..., 0.9953, 0.9952, 0.9908],
          [0.9998, 0.9997, 0.9978,  ..., 0.9992, 0.9906, 0.9989],
          [0.9995, 0.9971, 0.9994,  ..., 0.9902, 0.9963, 0.9920],
          ...,
          [0.9986, 0.9980, 0.9949,  ..., 0.9956, 0.9916, 0.9967],
          [0.9963, 0.9944, 0.9977,  ..., 0.9833, 0.9886, 0.9889],
          [0.9997, 0.9967, 0.9948,  ..., 0.9951, 0.9972, 0.9883]],
         [[0.9994, 0.9998, 0.9993,  ..., 0.9985, 0.9985, 0.9968],
          [0.9993, 0.9996, 0.9998,  ..., 0.9990, 0.9959, 0.9957],
          [0.9995, 0.9993, 0.9994,  ..., 0.9967, 0.9972, 0.9955],
          ...,
          [0.9977, 0.9989, 0.9979,  ..., 0.9983, 0.9920, 0.9925],
          [0.9994, 0.9996, 0.9988,  ..., 0.9972, 0.9958, 0.9968],
          [0.9994, 0.9975, 0.9988,  ..., 0.9942, 0.9916, 0.9925]]],
        [[[0.9826, 0.9997, 0.9836,  ..., 0.9999, 0.9925, 0.9989],
          [0.9996, 0.9983, 0.9996,  ..., 0.9989, 0.9973, 0.9991],
          [0.9984, 0.9988, 0.9906,  ..., 0.9998, 0.9959, 0.9998],
          ...,
          [0.9995, 0.9998, 0.9997,  ..., 0.9989, 0.9990, 0.9981],
          [0.9991, 0.9999, 0.9933,  ..., 0.9997, 0.9672, 0.9987],
          [0.9978, 0.9996, 0.9986,  ..., 0.9977, 0.9945, 0.9936]],
         [[0.9988, 0.9981, 0.9989,  ..., 0.9990, 0.9985, 0.9993],
          [0.9997, 0.9998, 0.9958,  ..., 0.9997, 0.9985, 0.9994],
          [0.9996, 0.9970, 0.9996,  ..., 0.9952, 0.9995, 0.9991],
          ...,
          [0.9995, 0.9989, 0.9986,  ..., 0.9980, 0.9953, 0.9983],
          [0.9993, 0.9983, 0.9995,  ..., 0.9857, 0.9933, 0.9940],
          [1.0000, 0.9984, 0.9987,  ..., 0.9971, 0.9986, 0.9899]],
         [[0.9995, 0.9999, 0.9994,  ..., 0.9998, 0.9999, 0.9995],
          [0.9992, 0.9998, 0.9998,  ..., 0.9999, 0.9991, 0.9991],
          [0.9996, 0.9996, 0.9989,  ..., 0.9995, 0.9997, 0.9996],
          ...,
          [0.9996, 0.9998, 0.9996,  ..., 0.9995, 0.9965, 0.9962],
          [0.9999, 1.0000, 0.9999,  ..., 0.9989, 0.9981, 0.9988],
          [0.9999, 0.9994, 0.9996,  ..., 0.9965, 0.9945, 0.9953]]],
        [[[0.9752, 0.9999, 0.9946,  ..., 0.9990, 0.9788, 0.9962],
          [0.9997, 0.9978, 0.9997,  ..., 0.9981, 0.9976, 0.9972],
          [0.9994, 0.9992, 0.9972,  ..., 0.9943, 0.9960, 0.9968],
          ...,
          [0.9987, 0.9992, 0.9985,  ..., 0.9975, 0.9978, 0.9970],
          [0.9977, 0.9998, 0.9876,  ..., 0.9995, 0.9722, 0.9980],
          [0.9958, 0.9990, 0.9956,  ..., 0.9962, 0.9920, 0.9926]],
         [[0.9996, 0.9992, 0.9986,  ..., 0.9955, 0.9959, 0.9925],
          [0.9998, 0.9997, 0.9979,  ..., 0.9993, 0.9920, 0.9991],
          [0.9996, 0.9977, 0.9995,  ..., 0.9910, 0.9972, 0.9936],
          ...,
          [0.9987, 0.9983, 0.9955,  ..., 0.9961, 0.9924, 0.9971],
          [0.9962, 0.9951, 0.9980,  ..., 0.9867, 0.9904, 0.9908],
          [0.9998, 0.9971, 0.9953,  ..., 0.9956, 0.9975, 0.9902]],
         [[0.9995, 0.9999, 0.9995,  ..., 0.9987, 0.9989, 0.9976],
          [0.9994, 0.9997, 0.9999,  ..., 0.9993, 0.9965, 0.9969],
          [0.9995, 0.9994, 0.9994,  ..., 0.9972, 0.9978, 0.9964],
          ...,
          [0.9978, 0.9991, 0.9983,  ..., 0.9987, 0.9930, 0.9935],
          [0.9995, 0.9997, 0.9990,  ..., 0.9977, 0.9965, 0.9973],
          [0.9995, 0.9978, 0.9990,  ..., 0.9953, 0.9936, 0.9937]]]],
       device='cuda:0', grad_fn=<TanhBackward0>))])
tensor_visual: torch.Size([1, 3, 256, 256])
image_numpy_visual: torch.Size([1, 3, 256, 256])
tensor_visual: torch.Size([5, 3, 256, 256])
image_numpy_visual: torch.Size([5, 3, 256, 256])
tensor_visual: torch.Size([5, 3, 256, 256])
image_numpy_visual: torch.Size([5, 3, 256, 256])
len_images: 3
shape of each image: [(3, 256, 256), (3, 256, 256), (3, 256, 256)]
vim shape: (3, 3, 256, 256)
after mod vim shape: (3, 3, 256, 256)
(epoch: 1, iters: 1600, time: 0.532, data: 0.003) D_A: 0.106 G_A: 0.215 D: 0.454 cycle_A: 4.789 idt_A: 0.000 D_B: 0.240 G_B: 0.353 cycle_B: 0.592 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 1700, time: 0.489, data: 0.003) D_A: 0.213 G_A: 0.654 D: 0.182 cycle_A: 4.281 idt_A: 0.000 D_B: 0.246 G_B: 0.299 cycle_B: 0.714 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 1800, time: 0.489, data: 0.003) D_A: 0.245 G_A: 0.254 D: 0.251 cycle_A: 3.175 idt_A: 0.000 D_B: 0.290 G_B: 0.190 cycle_B: 0.505 idt_B: 0.000
Aconcat: torch.Size([1, 6, 256, 256])
Bconcat: torch.Size([2, 3, 256, 256])
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "