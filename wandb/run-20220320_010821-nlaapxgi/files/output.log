create web directory ./checkpoints/concatCG3rdloss/web...
learning rate 0.0002000 -> 0.0002000
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/torch/optim/lr_scheduler.py:136: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 100, time: 0.484, data: 1.302) D_A: 0.555 G_A: 1.074 D: 0.989 cycle_A: 5.503 idt_A: 0.000 D_B: 0.531 G_B: 0.493 cycle_B: 1.072 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 200, time: 0.488, data: 0.005) D_A: 0.363 G_A: 0.733 D: 1.043 cycle_A: 3.559 idt_A: 0.000 D_B: 0.335 G_B: 0.401 cycle_B: 0.863 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 300, time: 0.492, data: 0.003) D_A: 0.389 G_A: 0.437 D: 0.798 cycle_A: 4.172 idt_A: 0.000 D_B: 0.340 G_B: 0.453 cycle_B: 0.929 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
model_get_current_visuals: OrderedDict([('real_A', tensor([[[[-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.],
          ...,
          [-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.]],
         [[-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.],
          ...,
          [-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.]],
         [[-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.],
          ...,
          [-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.],
          [-1., -1., -1.,  ..., -1., -1., -1.]],
         ...,
         [[ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          ...,
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.]],
         [[ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          ...,
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.]],
         [[ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          ...,
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.],
          [ 1.,  1.,  1.,  ...,  1.,  1.,  1.]]]], device='cuda:0')), ('fake_B', tensor([[[[0.9996, 0.9997, 0.9947,  ..., 0.9973, 0.9953, 0.9988],
          [0.9880, 0.9981, 0.9978,  ..., 0.9980, 0.9678, 0.9933],
          [0.9985, 0.9998, 0.9857,  ..., 0.9983, 0.9718, 0.9973],
          ...,
          [0.9939, 0.9876, 0.9946,  ..., 0.9873, 0.9626, 0.9821],
          [0.9989, 0.9980, 0.9904,  ..., 0.9861, 0.9920, 0.9933],
          [0.9894, 0.9833, 0.9956,  ..., 0.9821, 0.9809, 0.9459]],
         [[0.9998, 0.9999, 0.9983,  ..., 0.9994, 0.9895, 0.9978],
          [0.9994, 0.9995, 0.9984,  ..., 0.9970, 0.9981, 0.9961],
          [0.9997, 0.9994, 0.9890,  ..., 0.9989, 0.9855, 0.9943],
          ...,
          [0.9990, 0.9973, 0.9989,  ..., 0.9919, 0.9964, 0.9859],
          [0.9995, 0.9942, 0.9936,  ..., 0.9922, 0.9860, 0.9818],
          [0.9975, 0.9980, 0.9925,  ..., 0.9946, 0.9846, 0.9929]],
         [[0.9990, 0.9991, 0.9991,  ..., 0.9942, 0.9955, 0.9985],
          [0.9987, 0.9994, 0.9991,  ..., 0.9955, 0.9958, 0.9950],
          [0.9986, 0.9965, 0.9998,  ..., 0.9877, 0.9984, 0.9901],
          ...,
          [0.9985, 0.9984, 0.9936,  ..., 0.9973, 0.9827, 0.9865],
          [0.9968, 0.9944, 0.9987,  ..., 0.9786, 0.9937, 0.9961],
          [0.9952, 0.9985, 0.9957,  ..., 0.9885, 0.9917, 0.9895]]]],
       device='cuda:0', grad_fn=<TanhBackward0>)), ('rec_A', tensor([[[[0.9948, 0.9984, 0.7766,  ..., 0.9778, 0.8933, 0.9806],
          [0.9977, 0.9147, 0.9935,  ..., 0.9307, 0.9759, 0.9275],
          [0.9455, 0.9861, 0.0331,  ..., 0.9627, 0.9661, 0.9632],
          ...,
          [0.9852, 0.9181, 0.9528,  ..., 0.7984, 0.9641, 0.9794],
          [0.9508, 0.9763, 0.0845,  ..., 0.9650, 0.8586, 0.9713],
          [0.9799, 0.9557, 0.9935,  ..., 0.8833, 0.9527, 0.9291]],
         [[0.9841, 0.9403, 0.9378,  ..., 0.9694, 0.9684, 0.6883],
          [0.9674, 0.8873, 0.9431,  ..., 0.9569, 0.9039, 0.9489],
          [0.7531, 0.9698, 0.9711,  ..., 0.9654, 0.9613, 0.8499],
          ...,
          [0.8196, 0.9450, 0.9227,  ..., 0.9784, 0.6521, 0.9529],
          [0.6558, 0.9149, 0.9751,  ..., 0.9351, 0.8144, 0.8144],
          [0.9688, 0.9752, 0.9618,  ..., 0.9753, 0.8420, 0.9594]],
         [[0.8352, 0.9659, 0.9855,  ..., 0.8572, 0.7529, 0.9573],
          [0.9951, 0.9928, 0.9953,  ..., 0.9243, 0.9896, 0.9630],
          [0.8696, 0.9888, 0.9566,  ..., 0.8319, 0.5600, 0.9743],
          ...,
          [0.9670, 0.9696, 0.9475,  ..., 0.8699, 0.9598, 0.9197],
          [0.8092, 0.9763, 0.8662,  ..., 0.9880, 0.9634, 0.9358],
          [0.9187, 0.9854, 0.8018,  ..., 0.9798, 0.9178, 0.9095]],
         ...,
         [[0.9756, 0.9962, 0.9440,  ..., 0.9932, 0.9740, 0.9859],
          [0.9949, 0.9943, 0.9901,  ..., 0.9795, 0.9609, 0.9869],
          [0.9827, 0.9859, 0.9986,  ..., 0.9903, 0.9942, 0.9629],
          ...,
          [0.9669, 0.9939, 0.9493,  ..., 0.9846, 0.8593, 0.9844],
          [0.8912, 0.9135, 0.8601,  ..., 0.8478, 0.9129, 0.8789],
          [0.9541, 0.9375, 0.9809,  ..., 0.8781, 0.9540, 0.9529]],
         [[0.9389, 0.9618, 0.9938,  ..., 0.9804, 0.9866, 0.8897],
          [0.9794, 0.4656, 0.9476,  ..., 0.7804, 0.9620, 0.9560],
          [0.9938, 0.9810, 0.9809,  ..., 0.9792, 0.9506, 0.9265],
          ...,
          [0.7734, 0.7305, 0.9647,  ..., 0.8459, 0.9400, 0.8376],
          [0.9137, 0.9746, 0.9884,  ..., 0.9679, 0.9743, 0.9080],
          [0.8642, 0.8823, 0.8675,  ..., 0.7729, 0.8576, 0.6785]],
         [[0.9834, 0.9412, 0.6343,  ..., 0.8721, 0.9525, 0.9575],
          [0.9830, 0.9644, 0.7711,  ..., 0.9295, 0.9568, 0.8871],
          [0.9388, 0.9930, 0.9326,  ..., 0.9358, 0.8281, 0.9644],
          ...,
          [0.9701, 0.9722, 0.9606,  ..., 0.9528, 0.8076, 0.9820],
          [0.9599, 0.9389, 0.9372,  ..., 0.9007, 0.7996, 0.9311],
          [0.9715, 0.9060, 0.8609,  ..., 0.9021, 0.9092, 0.9577]]]],
       device='cuda:0', grad_fn=<TanhBackward0>)), ('real_B', tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]]], device='cuda:0')), ('fake_A', tensor([[[[ 0.9946,  0.9999,  0.1012,  ...,  0.9997,  0.9467,  0.9888],
          [ 0.9977,  0.2079,  0.9736,  ...,  0.7828,  0.9823,  0.7391],
          [ 0.9805,  0.9985, -0.8516,  ...,  0.9998,  0.8243,  0.9835],
          ...,
          [ 0.9694,  0.8592,  0.8949,  ...,  0.9010,  0.9040,  0.8238],
          [ 0.9029,  0.9926, -0.3860,  ...,  0.9201,  0.8590,  0.9076],
          [ 0.9548,  0.5774,  0.9568,  ...,  0.8265,  0.8854,  0.8600]],
         [[ 0.9977,  0.9398,  0.9902,  ...,  0.9193,  0.9896,  0.8585],
          [ 0.9784,  0.7994,  0.6889,  ...,  0.9942,  0.9870,  0.8515],
          [ 0.9955,  0.3768,  0.9659,  ...,  0.7593,  0.9928,  0.8698],
          ...,
          [ 0.7938,  0.6043,  0.7088,  ...,  0.8716,  0.7079,  0.9313],
          [ 0.9377,  0.4261,  0.9755,  ...,  0.5426,  0.9632,  0.8701],
          [ 0.9212,  0.7707,  0.8270,  ...,  0.9109,  0.6674,  0.8193]],
         [[ 0.7962,  0.8459,  0.9998,  ...,  0.9654,  0.9870,  0.9939],
          [ 0.9997,  0.9860,  0.9988,  ...,  0.9512,  0.9998,  0.9818],
          [ 0.3069,  0.9923,  0.9734,  ...,  0.9930,  0.9893,  0.9874],
          ...,
          [ 0.9812,  0.9437,  0.9540,  ...,  0.9044,  0.7072,  0.5744],
          [ 0.4025,  0.9458,  0.8960,  ...,  0.7808,  0.8429,  0.8878],
          [ 0.9441,  0.3945,  0.9265,  ...,  0.9397,  0.8031,  0.8868]],
         ...,
         [[-0.0944,  0.9886,  0.6321,  ...,  0.9345,  0.9239,  0.9939],
          [ 0.9950,  0.9907,  0.9758,  ...,  0.9528,  0.9910,  0.9801],
          [ 0.9877,  0.8690,  0.9979,  ...,  0.9923,  0.9975,  0.9898],
          ...,
          [ 0.9467,  0.9200,  0.9716,  ...,  0.8247,  0.7792,  0.8819],
          [ 0.8335,  0.9498,  0.2836,  ...,  0.6698,  0.7671,  0.4832],
          [ 0.9283,  0.9287,  0.4899,  ...,  0.7675,  0.8747,  0.6524]],
         [[-0.0291,  0.0864,  0.4726,  ...,  0.9814,  0.2495,  0.9221],
          [ 0.9960, -0.5746,  0.9773,  ...,  0.0711,  0.9990,  0.6740],
          [ 0.1302,  0.6445,  0.8661,  ...,  0.9857,  0.2675,  0.9526],
          ...,
          [ 0.4614, -0.7884, -0.1900,  ...,  0.6719,  0.7981,  0.6245],
          [ 0.8619,  0.5098,  0.6644,  ...,  0.7956,  0.7520,  0.4180],
          [ 0.9863,  0.2920,  0.8744,  ...,  0.4252,  0.7028,  0.4026]],
         [[ 0.8711,  0.7759,  0.9037,  ..., -0.0394,  0.9361,  0.9386],
          [ 0.9855,  0.0733,  0.8996,  ..., -0.2657,  0.8931,  0.9585],
          [-0.9305,  0.9770,  0.8866,  ...,  0.4630, -0.3286,  0.5489],
          ...,
          [ 0.8949, -0.0733,  0.8646,  ...,  0.8433,  0.6955,  0.9090],
          [ 0.3944,  0.3361,  0.6877,  ...,  0.8760,  0.7577,  0.7138],
          [ 0.9124, -0.0240,  0.7816,  ...,  0.8607,  0.8624,  0.7673]]],
        [[[ 0.9942,  0.9999,  0.1428,  ...,  0.9997,  0.9453,  0.9889],
          [ 0.9975,  0.1962,  0.9715,  ...,  0.7657,  0.9846,  0.7609],
          [ 0.9782,  0.9987, -0.8540,  ...,  0.9997,  0.8200,  0.9833],
          ...,
          [ 0.9713,  0.8627,  0.8943,  ...,  0.8952,  0.8980,  0.8155],
          [ 0.9014,  0.9934, -0.3930,  ...,  0.9153,  0.8461,  0.9033],
          [ 0.9585,  0.5995,  0.9585,  ...,  0.8236,  0.8753,  0.8575]],
         [[ 0.9966,  0.9527,  0.9920,  ...,  0.9326,  0.9889,  0.8739],
          [ 0.9825,  0.8010,  0.7076,  ...,  0.9934,  0.9889,  0.8468],
          [ 0.9959,  0.3039,  0.9734,  ...,  0.7557,  0.9930,  0.8558],
          ...,
          [ 0.8324,  0.6082,  0.7262,  ...,  0.8606,  0.6972,  0.9277],
          [ 0.9435,  0.4032,  0.9766,  ...,  0.5410,  0.9615,  0.8662],
          [ 0.9233,  0.7829,  0.8391,  ...,  0.9063,  0.6507,  0.8133]],
         [[ 0.7925,  0.8757,  0.9999,  ...,  0.9687,  0.9874,  0.9933],
          [ 0.9997,  0.9869,  0.9989,  ...,  0.9532,  0.9998,  0.9828],
          [ 0.3462,  0.9930,  0.9776,  ...,  0.9920,  0.9893,  0.9871],
          ...,
          [ 0.9820,  0.9457,  0.9492,  ...,  0.9006,  0.6941,  0.5684],
          [ 0.3960,  0.9511,  0.8927,  ...,  0.7723,  0.8371,  0.8849],
          [ 0.9391,  0.4725,  0.9233,  ...,  0.9352,  0.7924,  0.8815]],
         ...,
         [[-0.1423,  0.9897,  0.6888,  ...,  0.9430,  0.9172,  0.9936],
          [ 0.9955,  0.9919,  0.9790,  ...,  0.9526,  0.9905,  0.9772],
          [ 0.9880,  0.8899,  0.9980,  ...,  0.9908,  0.9974,  0.9890],
          ...,
          [ 0.9497,  0.9221,  0.9756,  ...,  0.8104,  0.7749,  0.8761],
          [ 0.8367,  0.9549,  0.3104,  ...,  0.6507,  0.7674,  0.4821],
          [ 0.9313,  0.9276,  0.4667,  ...,  0.7550,  0.8677,  0.6473]],
         [[ 0.0826,  0.0831,  0.4228,  ...,  0.9800,  0.2728,  0.9385],
          [ 0.9963, -0.6168,  0.9734,  ...,  0.0091,  0.9987,  0.6515],
          [ 0.1478,  0.6214,  0.8699,  ...,  0.9824,  0.2482,  0.9519],
          ...,
          [ 0.4787, -0.8035, -0.2380,  ...,  0.6712,  0.7928,  0.6241],
          [ 0.8765,  0.5260,  0.6819,  ...,  0.7894,  0.7516,  0.4034],
          [ 0.9883,  0.2487,  0.8766,  ...,  0.4138,  0.7043,  0.4074]],
         [[ 0.8777,  0.7615,  0.9036,  ..., -0.0115,  0.9201,  0.9431],
          [ 0.9865,  0.0290,  0.9115,  ..., -0.2569,  0.8778,  0.9551],
          [-0.9254,  0.9756,  0.8918,  ...,  0.4520, -0.2936,  0.5099],
          ...,
          [ 0.8998, -0.0713,  0.8657,  ...,  0.8427,  0.6948,  0.9040],
          [ 0.4072,  0.3618,  0.6969,  ...,  0.8700,  0.7563,  0.7006],
          [ 0.9118, -0.0013,  0.8151,  ...,  0.8598,  0.8535,  0.7560]]],
        [[[ 0.9954,  0.9999,  0.1654,  ...,  0.9996,  0.9469,  0.9812],
          [ 0.9973,  0.2533,  0.9773,  ...,  0.7841,  0.9813,  0.7564],
          [ 0.9728,  0.9978, -0.8512,  ...,  0.9997,  0.7728,  0.9766],
          ...,
          [ 0.9744,  0.8736,  0.8925,  ...,  0.9274,  0.9304,  0.8688],
          [ 0.9110,  0.9927, -0.2978,  ...,  0.9408,  0.8898,  0.9240],
          [ 0.9440,  0.5422,  0.9539,  ...,  0.8605,  0.9102,  0.9057]],
         [[ 0.9964,  0.9145,  0.9919,  ...,  0.9127,  0.9866,  0.8306],
          [ 0.9706,  0.7245,  0.7192,  ...,  0.9934,  0.9862,  0.8781],
          [ 0.9944,  0.5744,  0.9581,  ...,  0.7861,  0.9928,  0.8178],
          ...,
          [ 0.7921,  0.5668,  0.7435,  ...,  0.9043,  0.7513,  0.9575],
          [ 0.9338,  0.4393,  0.9783,  ...,  0.5951,  0.9774,  0.9096],
          [ 0.9185,  0.7625,  0.8507,  ...,  0.9375,  0.6967,  0.8630]],
         [[ 0.8020,  0.7932,  0.9999,  ...,  0.9557,  0.9870,  0.9931],
          [ 0.9996,  0.9893,  0.9988,  ...,  0.9588,  0.9998,  0.9862],
          [ 0.3578,  0.9878,  0.9653,  ...,  0.9923,  0.9894,  0.9845],
          ...,
          [ 0.9785,  0.9422,  0.9482,  ...,  0.9267,  0.7426,  0.6394],
          [ 0.4752,  0.9471,  0.9086,  ...,  0.8351,  0.8815,  0.9136],
          [ 0.9351,  0.3883,  0.9223,  ...,  0.9602,  0.8226,  0.9202]],
         ...,
         [[-0.0166,  0.9916,  0.7126,  ...,  0.9379,  0.9353,  0.9940],
          [ 0.9955,  0.9891,  0.9850,  ...,  0.9506,  0.9914,  0.9792],
          [ 0.9864,  0.8628,  0.9982,  ...,  0.9914,  0.9973,  0.9889],
          ...,
          [ 0.9398,  0.8880,  0.9743,  ...,  0.8646,  0.8527,  0.9262],
          [ 0.8185,  0.9501,  0.2604,  ...,  0.7509,  0.8386,  0.5676],
          [ 0.9210,  0.9356,  0.5125,  ...,  0.8401,  0.9142,  0.7100]],
         [[ 0.0781,  0.2046,  0.6700,  ...,  0.9762,  0.4755,  0.9266],
          [ 0.9924, -0.6187,  0.9679,  ..., -0.0283,  0.9985,  0.7004],
          [ 0.1042,  0.6656,  0.8879,  ...,  0.9858,  0.3134,  0.9510],
          ...,
          [ 0.4556, -0.7921, -0.1509,  ...,  0.7250,  0.8390,  0.7119],
          [ 0.8471,  0.5017,  0.6979,  ...,  0.8383,  0.8221,  0.4625],
          [ 0.9856,  0.2908,  0.8682,  ...,  0.4712,  0.7656,  0.5168]],
         [[ 0.8979,  0.6946,  0.9192,  ..., -0.0986,  0.9520,  0.9426],
          [ 0.9838,  0.0157,  0.8929,  ..., -0.1059,  0.8592,  0.9496],
          [-0.8922,  0.9850,  0.8972,  ...,  0.4477, -0.1857,  0.5655],
          ...,
          [ 0.9042,  0.0623,  0.9075,  ...,  0.8947,  0.7122,  0.9362],
          [ 0.4656,  0.3444,  0.7042,  ...,  0.9099,  0.8146,  0.7809],
          [ 0.8956,  0.0692,  0.7672,  ...,  0.9077,  0.8901,  0.8144]]],
        [[[ 0.9945,  0.9999,  0.1231,  ...,  0.9995,  0.9450,  0.9823],
          [ 0.9971,  0.2712,  0.9732,  ...,  0.7739,  0.9787,  0.7441],
          [ 0.9761,  0.9979, -0.8568,  ...,  0.9996,  0.7748,  0.9760],
          ...,
          [ 0.9722,  0.8714,  0.8869,  ...,  0.9298,  0.9296,  0.8678],
          [ 0.9167,  0.9922, -0.3328,  ...,  0.9393,  0.8885,  0.9233],
          [ 0.9462,  0.5578,  0.9545,  ...,  0.8561,  0.9096,  0.9021]],
         [[ 0.9967,  0.9293,  0.9899,  ...,  0.9135,  0.9841,  0.8424],
          [ 0.9707,  0.7422,  0.6966,  ...,  0.9928,  0.9864,  0.8510],
          [ 0.9947,  0.4572,  0.9621,  ...,  0.7708,  0.9912,  0.8139],
          ...,
          [ 0.7953,  0.5889,  0.7251,  ...,  0.9034,  0.7555,  0.9566],
          [ 0.9269,  0.4437,  0.9763,  ...,  0.5921,  0.9772,  0.9101],
          [ 0.9155,  0.7443,  0.8504,  ...,  0.9352,  0.7021,  0.8622]],
         [[ 0.7620,  0.8261,  0.9998,  ...,  0.9625,  0.9860,  0.9929],
          [ 0.9996,  0.9865,  0.9986,  ...,  0.9534,  0.9997,  0.9829],
          [ 0.3118,  0.9884,  0.9611,  ...,  0.9921,  0.9891,  0.9832],
          ...,
          [ 0.9748,  0.9388,  0.9451,  ...,  0.9283,  0.7324,  0.6337],
          [ 0.4398,  0.9509,  0.9117,  ...,  0.8234,  0.8747,  0.9146],
          [ 0.9284,  0.3864,  0.9130,  ...,  0.9598,  0.8222,  0.9178]],
         ...,
         [[ 0.0258,  0.9887,  0.6990,  ...,  0.9255,  0.9299,  0.9926],
          [ 0.9943,  0.9880,  0.9805,  ...,  0.9462,  0.9901,  0.9765],
          [ 0.9850,  0.8625,  0.9973,  ...,  0.9912,  0.9967,  0.9879],
          ...,
          [ 0.9320,  0.8876,  0.9702,  ...,  0.8598,  0.8522,  0.9233],
          [ 0.8197,  0.9467,  0.2650,  ...,  0.7465,  0.8345,  0.5617],
          [ 0.9191,  0.9355,  0.5213,  ...,  0.8355,  0.9144,  0.7077]],
         [[ 0.0826,  0.0514,  0.6263,  ...,  0.9747,  0.3972,  0.9152],
          [ 0.9925, -0.5501,  0.9696,  ..., -0.0192,  0.9983,  0.6798],
          [ 0.1165,  0.6001,  0.8724,  ...,  0.9832,  0.3187,  0.9466],
          ...,
          [ 0.4634, -0.7758, -0.1485,  ...,  0.7324,  0.8366,  0.7069],
          [ 0.8524,  0.5331,  0.6798,  ...,  0.8300,  0.8182,  0.4485],
          [ 0.9848,  0.2921,  0.8577,  ...,  0.4697,  0.7634,  0.5140]],
         [[ 0.8565,  0.7576,  0.9046,  ..., -0.0941,  0.9426,  0.9403],
          [ 0.9838,  0.0357,  0.8885,  ..., -0.1235,  0.8536,  0.9530],
          [-0.9000,  0.9812,  0.8910,  ...,  0.4137, -0.2653,  0.5546],
          ...,
          [ 0.9002,  0.0517,  0.8946,  ...,  0.8920,  0.7056,  0.9351],
          [ 0.4679,  0.3120,  0.6810,  ...,  0.9090,  0.8131,  0.7793],
          [ 0.8907,  0.0705,  0.7462,  ...,  0.9045,  0.8839,  0.8031]]],
        [[[ 0.9911,  0.9999,  0.3506,  ...,  0.9993,  0.9148,  0.9822],
          [ 0.9962,  0.0051,  0.9638,  ...,  0.6641,  0.9773,  0.7359],
          [ 0.9584,  0.9966, -0.7819,  ...,  0.9992,  0.7724,  0.9771],
          ...,
          [ 0.9606,  0.8152,  0.8870,  ...,  0.8271,  0.8460,  0.7447],
          [ 0.8406,  0.9897, -0.3095,  ...,  0.8639,  0.7891,  0.8644],
          [ 0.9496,  0.5515,  0.9469,  ...,  0.7704,  0.8179,  0.7943]],
         [[ 0.9955,  0.9211,  0.9923,  ...,  0.9160,  0.9872,  0.8248],
          [ 0.9695,  0.7960,  0.7413,  ...,  0.9876,  0.9800,  0.8041],
          [ 0.9933,  0.3046,  0.9635,  ...,  0.6812,  0.9889,  0.8249],
          ...,
          [ 0.8089,  0.5741,  0.6823,  ...,  0.8006,  0.6131,  0.8741],
          [ 0.9493,  0.3595,  0.9708,  ...,  0.4707,  0.9216,  0.7951],
          [ 0.8961,  0.7856,  0.7982,  ...,  0.8497,  0.5862,  0.7429]],
         [[ 0.8454,  0.8268,  0.9997,  ...,  0.9411,  0.9813,  0.9856],
          [ 0.9996,  0.9806,  0.9983,  ...,  0.9166,  0.9995,  0.9662],
          [ 0.4171,  0.9898,  0.9774,  ...,  0.9855,  0.9823,  0.9768],
          ...,
          [ 0.9832,  0.9321,  0.9445,  ...,  0.8460,  0.6605,  0.4920],
          [ 0.3905,  0.9135,  0.8348,  ...,  0.6747,  0.7776,  0.8223],
          [ 0.9450,  0.4815,  0.9170,  ...,  0.8793,  0.7408,  0.8147]],
         ...,
         [[-0.3188,  0.9871,  0.5771,  ...,  0.9248,  0.8574,  0.9882],
          [ 0.9915,  0.9891,  0.9623,  ...,  0.9304,  0.9814,  0.9673],
          [ 0.9847,  0.8510,  0.9976,  ...,  0.9817,  0.9958,  0.9786],
          ...,
          [ 0.9331,  0.9019,  0.9708,  ...,  0.7296,  0.6687,  0.7949],
          [ 0.8380,  0.9287,  0.4118,  ...,  0.5153,  0.6627,  0.3757],
          [ 0.9113,  0.8928,  0.4319,  ...,  0.6331,  0.7889,  0.5442]],
         [[-0.0804,  0.1139,  0.0778,  ...,  0.9721,  0.2217,  0.9207],
          [ 0.9932, -0.6795,  0.9580,  ...,  0.0156,  0.9970,  0.5785],
          [ 0.0367,  0.6660,  0.8014,  ...,  0.9719,  0.1568,  0.9386],
          ...,
          [ 0.3615, -0.7462, -0.2238,  ...,  0.5745,  0.6989,  0.5175],
          [ 0.8686,  0.5472,  0.6458,  ...,  0.7265,  0.6541,  0.3234],
          [ 0.9842,  0.2913,  0.8586,  ...,  0.3232,  0.5902,  0.2882]],
         [[ 0.8657,  0.7402,  0.8711,  ...,  0.0567,  0.8566,  0.9171],
          [ 0.9770,  0.0651,  0.8804,  ..., -0.2296,  0.8525,  0.9343],
          [-0.8983,  0.9686,  0.8532,  ...,  0.5433, -0.2334,  0.5284],
          ...,
          [ 0.8774, -0.0916,  0.8100,  ...,  0.7770,  0.6485,  0.8444],
          [ 0.3829,  0.3594,  0.6865,  ...,  0.8016,  0.6711,  0.6135],
          [ 0.9134, -0.0594,  0.8131,  ...,  0.7779,  0.7913,  0.7020]]]],
       device='cuda:0', grad_fn=<TanhBackward0>)), ('rec_B', tensor([[[[0.9987, 0.9959, 0.9399,  ..., 0.9971, 0.9974, 0.9980],
          [0.9992, 0.9982, 0.9968,  ..., 0.9988, 0.9925, 0.9980],
          [0.9991, 0.9900, 0.9773,  ..., 0.9851, 0.9794, 0.9965],
          ...,
          [0.9991, 0.9972, 0.9979,  ..., 0.9876, 0.9880, 0.9868],
          [0.9623, 0.9983, 0.9947,  ..., 0.9842, 0.9860, 0.9946],
          [0.9957, 0.9896, 0.9936,  ..., 0.9865, 0.9819, 0.9827]],
         [[0.9927, 0.9973, 0.9998,  ..., 0.9997, 0.9910, 0.9600],
          [0.9849, 0.9908, 0.9930,  ..., 0.9942, 0.9804, 0.9985],
          [0.9487, 0.9965, 0.9940,  ..., 0.9990, 0.9338, 0.9873],
          ...,
          [0.9975, 0.9975, 0.9949,  ..., 0.9876, 0.9925, 0.9906],
          [0.9878, 0.9989, 0.9936,  ..., 0.9834, 0.9779, 0.9932],
          [0.9953, 0.9912, 0.9987,  ..., 0.9938, 0.9823, 0.9951]],
         [[0.9990, 0.9966, 0.9931,  ..., 0.9950, 0.9946, 0.9375],
          [0.9912, 0.9981, 0.9798,  ..., 0.9974, 0.9960, 0.9952],
          [0.9970, 0.9781, 0.9678,  ..., 0.9831, 0.9926, 0.9922],
          ...,
          [0.9602, 0.9989, 0.9943,  ..., 0.9957, 0.9861, 0.9936],
          [0.9974, 0.9983, 0.9874,  ..., 0.9908, 0.9849, 0.9939],
          [0.9915, 0.9908, 0.9873,  ..., 0.9857, 0.9798, 0.9866]]],
        [[[0.9985, 0.9960, 0.9395,  ..., 0.9967, 0.9973, 0.9975],
          [0.9990, 0.9982, 0.9963,  ..., 0.9986, 0.9918, 0.9975],
          [0.9991, 0.9884, 0.9784,  ..., 0.9853, 0.9785, 0.9960],
          ...,
          [0.9987, 0.9967, 0.9976,  ..., 0.9864, 0.9874, 0.9855],
          [0.9539, 0.9982, 0.9942,  ..., 0.9811, 0.9850, 0.9941],
          [0.9939, 0.9876, 0.9921,  ..., 0.9857, 0.9801, 0.9807]],
         [[0.9918, 0.9968, 0.9997,  ..., 0.9996, 0.9919, 0.9539],
          [0.9832, 0.9893, 0.9924,  ..., 0.9930, 0.9804, 0.9986],
          [0.9506, 0.9956, 0.9938,  ..., 0.9990, 0.9224, 0.9846],
          ...,
          [0.9972, 0.9971, 0.9945,  ..., 0.9869, 0.9914, 0.9894],
          [0.9845, 0.9986, 0.9907,  ..., 0.9800, 0.9743, 0.9917],
          [0.9937, 0.9904, 0.9982,  ..., 0.9929, 0.9802, 0.9944]],
         [[0.9989, 0.9954, 0.9940,  ..., 0.9933, 0.9934, 0.9334],
          [0.9896, 0.9983, 0.9791,  ..., 0.9973, 0.9961, 0.9942],
          [0.9966, 0.9780, 0.9716,  ..., 0.9815, 0.9928, 0.9905],
          ...,
          [0.9545, 0.9987, 0.9928,  ..., 0.9951, 0.9854, 0.9926],
          [0.9971, 0.9981, 0.9855,  ..., 0.9893, 0.9837, 0.9934],
          [0.9892, 0.9909, 0.9843,  ..., 0.9841, 0.9765, 0.9857]]],
        [[[0.9984, 0.9954, 0.9077,  ..., 0.9981, 0.9983, 0.9984],
          [0.9982, 0.9980, 0.9933,  ..., 0.9991, 0.9945, 0.9981],
          [0.9989, 0.9874, 0.9711,  ..., 0.9890, 0.9863, 0.9973],
          ...,
          [0.9992, 0.9972, 0.9976,  ..., 0.9903, 0.9907, 0.9893],
          [0.9678, 0.9983, 0.9958,  ..., 0.9818, 0.9866, 0.9957],
          [0.9960, 0.9883, 0.9920,  ..., 0.9900, 0.9823, 0.9852]],
         [[0.9920, 0.9968, 0.9998,  ..., 0.9996, 0.9941, 0.9652],
          [0.9882, 0.9882, 0.9931,  ..., 0.9962, 0.9893, 0.9989],
          [0.9422, 0.9938, 0.9914,  ..., 0.9994, 0.9419, 0.9895],
          ...,
          [0.9976, 0.9983, 0.9952,  ..., 0.9911, 0.9932, 0.9911],
          [0.9873, 0.9989, 0.9926,  ..., 0.9855, 0.9782, 0.9940],
          [0.9955, 0.9909, 0.9984,  ..., 0.9946, 0.9838, 0.9959]],
         [[0.9989, 0.9959, 0.9943,  ..., 0.9964, 0.9959, 0.9597],
          [0.9923, 0.9975, 0.9850,  ..., 0.9983, 0.9980, 0.9963],
          [0.9969, 0.9757, 0.9723,  ..., 0.9836, 0.9938, 0.9921],
          ...,
          [0.9683, 0.9992, 0.9951,  ..., 0.9970, 0.9898, 0.9941],
          [0.9977, 0.9981, 0.9877,  ..., 0.9924, 0.9908, 0.9952],
          [0.9920, 0.9933, 0.9904,  ..., 0.9900, 0.9843, 0.9882]]],
        [[[0.9979, 0.9962, 0.9418,  ..., 0.9967, 0.9971, 0.9971],
          [0.9988, 0.9977, 0.9942,  ..., 0.9984, 0.9915, 0.9969],
          [0.9982, 0.9903, 0.9745,  ..., 0.9815, 0.9784, 0.9957],
          ...,
          [0.9994, 0.9976, 0.9979,  ..., 0.9899, 0.9908, 0.9895],
          [0.9698, 0.9985, 0.9958,  ..., 0.9793, 0.9857, 0.9955],
          [0.9965, 0.9886, 0.9933,  ..., 0.9906, 0.9828, 0.9856]],
         [[0.9915, 0.9963, 0.9997,  ..., 0.9993, 0.9900, 0.9640],
          [0.9857, 0.9869, 0.9935,  ..., 0.9943, 0.9831, 0.9980],
          [0.9256, 0.9955, 0.9908,  ..., 0.9990, 0.9262, 0.9884],
          ...,
          [0.9979, 0.9983, 0.9958,  ..., 0.9907, 0.9929, 0.9907],
          [0.9870, 0.9990, 0.9941,  ..., 0.9857, 0.9753, 0.9936],
          [0.9958, 0.9913, 0.9989,  ..., 0.9943, 0.9828, 0.9957]],
         [[0.9987, 0.9957, 0.9923,  ..., 0.9934, 0.9948, 0.9386],
          [0.9895, 0.9971, 0.9832,  ..., 0.9968, 0.9945, 0.9942],
          [0.9969, 0.9776, 0.9738,  ..., 0.9805, 0.9906, 0.9892],
          ...,
          [0.9681, 0.9992, 0.9960,  ..., 0.9966, 0.9898, 0.9937],
          [0.9977, 0.9984, 0.9881,  ..., 0.9918, 0.9903, 0.9954],
          [0.9928, 0.9927, 0.9910,  ..., 0.9898, 0.9833, 0.9887]]],
        [[[0.9938, 0.9940, 0.9551,  ..., 0.9892, 0.9918, 0.9908],
          [0.9973, 0.9968, 0.9931,  ..., 0.9937, 0.9767, 0.9897],
          [0.9971, 0.9842, 0.9580,  ..., 0.9680, 0.9468, 0.9913],
          ...,
          [0.9962, 0.9952, 0.9951,  ..., 0.9814, 0.9784, 0.9775],
          [0.9321, 0.9971, 0.9838,  ..., 0.9837, 0.9795, 0.9905],
          [0.9884, 0.9874, 0.9899,  ..., 0.9765, 0.9726, 0.9684]],
         [[0.9864, 0.9943, 0.9991,  ..., 0.9983, 0.9819, 0.9322],
          [0.9731, 0.9844, 0.9858,  ..., 0.9794, 0.9524, 0.9953],
          [0.9262, 0.9906, 0.9873,  ..., 0.9952, 0.8922, 0.9648],
          ...,
          [0.9942, 0.9932, 0.9878,  ..., 0.9804, 0.9883, 0.9841],
          [0.9801, 0.9966, 0.9895,  ..., 0.9746, 0.9723, 0.9894],
          [0.9902, 0.9894, 0.9960,  ..., 0.9910, 0.9767, 0.9908]],
         [[0.9977, 0.9877, 0.9904,  ..., 0.9720, 0.9796, 0.8883],
          [0.9824, 0.9956, 0.9538,  ..., 0.9876, 0.9807, 0.9755],
          [0.9915, 0.9754, 0.9663,  ..., 0.9654, 0.9848, 0.9772],
          ...,
          [0.9464, 0.9966, 0.9898,  ..., 0.9903, 0.9815, 0.9881],
          [0.9944, 0.9966, 0.9758,  ..., 0.9851, 0.9755, 0.9883],
          [0.9758, 0.9829, 0.9777,  ..., 0.9762, 0.9692, 0.9794]]]],
       device='cuda:0', grad_fn=<TanhBackward0>))])
tensor_visual: torch.Size([1, 15, 256, 256])
image_numpy_visual: torch.Size([1, 15, 256, 256])
tensor_visual: torch.Size([1, 3, 256, 256])
image_numpy_visual: torch.Size([1, 3, 256, 256])
tensor_visual: torch.Size([1, 15, 256, 256])
image_numpy_visual: torch.Size([1, 15, 256, 256])
tensor_visual: torch.Size([5, 3, 256, 256])
image_numpy_visual: torch.Size([5, 3, 256, 256])
tensor_visual: torch.Size([5, 15, 256, 256])
image_numpy_visual: torch.Size([5, 15, 256, 256])
tensor_visual: torch.Size([5, 3, 256, 256])
image_numpy_visual: torch.Size([5, 3, 256, 256])
len_images: 8
shape of each image: [(15, 256, 256), (3, 256, 256), (15, 256, 256), (3, 256, 256), (15, 256, 256), (3, 256, 256), (3, 256, 256), (3, 256, 256)]
vim shape: (8,)
after mod vim shape: (8,)
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/visdom/__init__.py:366: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array(a)