/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/torch/optim/lr_scheduler.py:136: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
create web directory ./checkpoints/concatCG3rdloss/web...
learning rate 0.0002000 -> 0.0002000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 100, time: 0.482, data: 0.999) D_A: 0.483 G_A: 1.013 D: 0.889 cycle_A: 5.683 idt_A: 0.000 D_B: 0.660 G_B: 0.619 cycle_B: 1.877 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 200, time: 0.486, data: 0.003) D_A: 0.319 G_A: 0.790 D: 0.829 cycle_A: 4.559 idt_A: 0.000 D_B: 0.511 G_B: 0.665 cycle_B: 0.974 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
(epoch: 1, iters: 300, time: 0.488, data: 0.003) D_A: 0.494 G_A: 0.956 D: 0.505 cycle_A: 5.465 idt_A: 0.000 D_B: 0.463 G_B: 0.516 cycle_B: 0.650 idt_B: 0.000
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
Aconcat: torch.Size([1, 15, 256, 256])
Bconcat: torch.Size([5, 3, 256, 256])
model_get_current_visuals: OrderedDict([('real_A', tensor([[[[0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          ...,
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],
         [[0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          ...,
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],
         [[0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          ...,
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [0.9922, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],
         ...,
         [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          ...,
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],
         [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          ...,
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],
         [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          ...,
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],
          [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]]]],
       device='cuda:0')), ('fake_B', tensor([[[[0.9993, 1.0000, 0.9997,  ..., 0.9984, 0.9962, 0.9967],
          [0.9980, 0.9997, 0.9967,  ..., 0.9949, 0.9701, 0.9981],
          [0.9994, 0.9991, 0.9983,  ..., 0.9911, 0.9936, 0.9921],
          ...,
          [0.9856, 0.9908, 0.9935,  ..., 0.9867, 0.9519, 0.9670],
          [0.9925, 0.9987, 0.9734,  ..., 0.9881, 0.9583, 0.9635],
          [0.9976, 0.9966, 0.9826,  ..., 0.9907, 0.9190, 0.9690]],
         [[0.9999, 0.9996, 0.9999,  ..., 0.9967, 0.9976, 0.9956],
          [0.9989, 0.9992, 0.9997,  ..., 0.9966, 0.9973, 0.9975],
          [0.9980, 0.9991, 0.9997,  ..., 0.9941, 0.9944, 0.9850],
          ...,
          [0.9966, 0.9965, 0.9980,  ..., 0.9827, 0.9924, 0.9910],
          [0.9966, 0.9930, 0.9996,  ..., 0.9840, 0.9929, 0.9850],
          [0.9936, 0.9994, 0.9970,  ..., 0.9945, 0.9819, 0.9889]],
         [[0.9996, 0.9993, 0.9988,  ..., 0.9957, 0.9976, 0.9953],
          [0.9999, 0.9999, 0.9996,  ..., 0.9967, 0.9985, 0.9970],
          [0.9983, 0.9998, 0.9980,  ..., 0.9969, 0.9969, 0.9956],
          ...,
          [0.9987, 0.9982, 0.9961,  ..., 0.9970, 0.9911, 0.9811],
          [0.9969, 0.9975, 0.9959,  ..., 0.9930, 0.9952, 0.9836],
          [0.9974, 0.9965, 0.9959,  ..., 0.9911, 0.9842, 0.9920]]]],
       device='cuda:0', grad_fn=<TanhBackward0>)), ('rec_A', tensor([[[[0.9990, 0.9894, 0.9961,  ..., 0.9933, 0.9618, 0.9786],
          [0.9943, 0.9675, 0.9802,  ..., 0.7878, 0.9697, 0.9838],
          [0.9938, 0.9353, 0.9903,  ..., 0.9742, 0.9872, 0.8289],
          ...,
          [0.9035, 0.9212, 0.9756,  ..., 0.7464, 0.8923, 0.8699],
          [0.9964, 0.9889, 0.9958,  ..., 0.9959, 0.9888, 0.9597],
          [0.9899, 0.9237, 0.9229,  ..., 0.9176, 0.9442, 0.9306]],
         [[0.9985, 0.9890, 0.9970,  ..., 0.9504, 0.9721, 0.9277],
          [0.9932, 0.9754, 0.9823,  ..., 0.9317, 0.9119, 0.8708],
          [0.9917, 0.9903, 0.9940,  ..., 0.9760, 0.9565, 0.8894],
          ...,
          [0.9681, 0.9646, 0.9911,  ..., 0.7973, 0.7862, 0.9172],
          [0.9901, 0.9794, 0.9938,  ..., 0.8627, 0.9327, 0.8840],
          [0.9854, 0.9394, 0.9823,  ..., 0.8561, 0.8587, 0.9127]],
         [[0.9825, 0.9445, 0.9886,  ..., 0.8998, 0.9199, 0.8014],
          [0.9661, 0.9125, 0.9597,  ..., 0.7979, 0.9190, 0.9344],
          [0.9143, 0.9659, 0.9950,  ..., 0.9843, 0.9319, 0.8740],
          ...,
          [0.8453, 0.9737, 0.8678,  ..., 0.9130, 0.8037, 0.7372],
          [0.9844, 0.9221, 0.9949,  ..., 0.9084, 0.9054, 0.7428],
          [0.8579, 0.9193, 0.9306,  ..., 0.9042, 0.4252, 0.9127]],
         ...,
         [[0.9757, 0.9756, 0.9648,  ..., 0.9632, 0.9127, 0.7576],
          [0.9966, 0.9903, 0.9833,  ..., 0.9338, 0.9768, 0.9472],
          [0.8920, 0.9933, 0.9476,  ..., 0.9908, 0.9233, 0.9192],
          ...,
          [0.9853, 0.9796, 0.9608,  ..., 0.9565, 0.9101, 0.9027],
          [0.9538, 0.9256, 0.9680,  ..., 0.9378, 0.8251, 0.9117],
          [0.9987, 0.9920, 0.9320,  ..., 0.9578, 0.9562, 0.9227]],
         [[0.9327, 0.9970, 0.9851,  ..., 0.9956, 0.9774, 0.9597],
          [0.9906, 0.9133, 0.9859,  ..., 0.9285, 0.9612, 0.9055],
          [0.9914, 0.9907, 0.9953,  ..., 0.9605, 0.9969, 0.9319],
          ...,
          [0.9569, 0.9376, 0.9659,  ..., 0.9319, 0.9644, 0.5707],
          [0.9797, 0.9966, 0.9907,  ..., 0.9493, 0.9904, 0.9659],
          [0.9968, 0.9574, 0.9790,  ..., 0.9877, 0.9866, 0.9202]],
         [[0.9899, 0.9617, 0.9923,  ..., 0.9678, 0.8843, 0.9064],
          [0.9986, 0.8657, 0.9814,  ..., 0.9214, 0.8279, 0.9362],
          [0.9803, 0.8893, 0.9483,  ..., 0.9456, 0.9568, 0.8355],
          ...,
          [0.9807, 0.9597, 0.7250,  ..., 0.8988, 0.6115, 0.9413],
          [0.9580, 0.9616, 0.9808,  ..., 0.9424, 0.8680, 0.9525],
          [0.9598, 0.9466, 0.8371,  ..., 0.8800, 0.5152, 0.8234]]]],
       device='cuda:0', grad_fn=<TanhBackward0>)), ('real_B', tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]],
        [[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]],
         [[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          ...,
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.]]]], device='cuda:0')), ('fake_A', tensor([[[[ 0.9980,  0.9672,  0.9954,  ...,  0.7461,  0.9708,  0.9451],
          [ 0.9994,  0.9043,  0.9920,  ...,  0.9804,  0.9768,  0.9601],
          [ 0.9943,  0.4536,  0.9513,  ...,  0.9097,  0.9811,  0.8431],
          ...,
          [ 0.9406,  0.6008,  0.9754,  ...,  0.5404,  0.6457,  0.6560],
          [ 0.9587,  0.9225,  0.9209,  ...,  0.8833,  0.8562,  0.8446],
          [ 0.9699,  0.8913,  0.9374,  ...,  0.6456,  0.5847,  0.5164]],
         [[ 0.9999,  0.9995,  0.9980,  ...,  0.9567,  0.9900,  0.9496],
          [ 0.9994,  0.8570,  0.8978,  ...,  0.8693,  0.9097,  0.7234],
          [ 0.9811,  0.9823,  0.9974,  ...,  0.9594,  0.9896,  0.9447],
          ...,
          [ 0.8535,  0.8444,  0.9969,  ...,  0.1880,  0.3442,  0.4337],
          [ 0.9955,  0.9938,  0.9870,  ...,  0.6376,  0.4419,  0.5975],
          [ 0.8622,  0.8949,  0.9799,  ...,  0.2702,  0.2861,  0.4260]],
         [[ 0.9698,  0.9952,  0.9394,  ...,  0.9730,  0.9356,  0.4062],
          [ 0.9962,  0.9412,  0.9952,  ...,  0.9503,  0.9405,  0.9582],
          [ 0.8465,  0.9046,  0.9727,  ...,  0.9881, -0.5123,  0.7886],
          ...,
          [ 0.9843,  0.4556,  0.7362,  ...,  0.1771,  0.3673,  0.3229],
          [ 0.9546,  0.9216,  0.9831,  ...,  0.7766,  0.7535,  0.6003],
          [ 0.5033,  0.8431, -0.0902,  ...,  0.5323,  0.3633,  0.5119]],
         ...,
         [[ 0.8988,  0.9922,  0.9976,  ...,  0.9678,  0.9831,  0.8795],
          [ 0.9754,  0.9865,  0.9599,  ...,  0.9948,  0.9366,  0.9901],
          [ 0.2845,  0.9454,  0.8129,  ...,  0.9945, -0.1494,  0.4329],
          ...,
          [ 0.8618,  0.9949,  0.9610,  ...,  0.6528,  0.2779,  0.6453],
          [ 0.8991,  0.3071,  0.8457,  ...,  0.4870,  0.5203,  0.6297],
          [ 0.9398,  0.9767,  0.3781,  ...,  0.6014,  0.6934,  0.6723]],
         [[ 0.8651,  0.9773,  0.9914,  ...,  0.9960,  0.7906,  0.9160],
          [ 0.9888,  0.9272,  0.9539,  ...,  0.4520,  0.6680,  0.9660],
          [ 0.9983,  0.9754,  0.9982,  ...,  0.9956,  0.8870,  0.9489],
          ...,
          [ 0.7221,  0.7538,  0.9356,  ...,  0.7629,  0.8800,  0.5014],
          [ 0.8870,  0.9582,  0.9662,  ...,  0.4271,  0.8149,  0.5597],
          [ 0.9334,  0.9596,  0.9494,  ...,  0.8924,  0.7897,  0.7814]],
         [[ 0.7687,  0.9717,  0.9946,  ...,  0.9452,  0.9755,  0.8898],
          [ 0.9970,  0.0737,  0.9139,  ...,  0.9418,  0.6895,  0.8255],
          [ 0.8837,  0.1320,  0.9943,  ..., -0.3634,  0.7584,  0.7497],
          ...,
          [ 0.6110,  0.8699, -0.2780,  ...,  0.7116,  0.3698,  0.6976],
          [ 0.9376,  0.2198,  0.9468,  ...,  0.4065,  0.6404,  0.6302],
          [ 0.8905,  0.9170,  0.6462,  ...,  0.6992,  0.1256,  0.4352]]],
        [[[ 0.9949,  0.9394,  0.9783,  ...,  0.7215,  0.8532,  0.8837],
          [ 0.9973,  0.9052,  0.9821,  ...,  0.9293,  0.9503,  0.9197],
          [ 0.9887,  0.4032,  0.9316,  ...,  0.8014,  0.9080,  0.6591],
          ...,
          [ 0.9392,  0.6190,  0.9662,  ...,  0.3247,  0.4831,  0.4897],
          [ 0.9603,  0.9423,  0.9226,  ...,  0.6994,  0.7025,  0.6798],
          [ 0.9600,  0.8324,  0.8936,  ...,  0.4864,  0.3354,  0.2800]],
         [[ 0.9993,  0.9963,  0.9937,  ...,  0.8380,  0.9564,  0.9060],
          [ 0.9891,  0.7774,  0.7870,  ...,  0.6640,  0.7122,  0.5753],
          [ 0.9367,  0.9439,  0.9721,  ...,  0.8256,  0.9404,  0.8582],
          ...,
          [ 0.7483,  0.7729,  0.9921,  ...,  0.0424,  0.1562,  0.1560],
          [ 0.9911,  0.9758,  0.9780,  ...,  0.4499,  0.2578,  0.3050],
          [ 0.8393,  0.8149,  0.9624,  ...,  0.0544,  0.0773,  0.2023]],
         [[ 0.9023,  0.9902,  0.9479,  ...,  0.8489,  0.8130,  0.3431],
          [ 0.9781,  0.8854,  0.9884,  ...,  0.8331,  0.8936,  0.8745],
          [ 0.7995,  0.6950,  0.9737,  ...,  0.9615, -0.3358,  0.6408],
          ...,
          [ 0.9631,  0.4811,  0.6108,  ...,  0.0227,  0.2134,  0.1418],
          [ 0.9614,  0.8099,  0.9831,  ...,  0.5610,  0.6437,  0.5553],
          [ 0.5574,  0.7080, -0.1804,  ...,  0.2948,  0.2150,  0.2208]],
         ...,
         [[ 0.8876,  0.9776,  0.9935,  ...,  0.9217,  0.9053,  0.8472],
          [ 0.9589,  0.9897,  0.9366,  ...,  0.9681,  0.8266,  0.9670],
          [ 0.4665,  0.9570,  0.7063,  ...,  0.9754,  0.0584,  0.3572],
          ...,
          [ 0.8062,  0.9860,  0.9165,  ...,  0.4567,  0.1354,  0.4675],
          [ 0.8727,  0.5246,  0.7889,  ...,  0.4341,  0.3607,  0.4213],
          [ 0.9353,  0.9696,  0.3301,  ...,  0.3972,  0.5089,  0.4575]],
         [[ 0.7336,  0.9711,  0.9821,  ...,  0.9812,  0.7299,  0.8560],
          [ 0.9889,  0.9405,  0.9624,  ...,  0.3489,  0.7054,  0.9176],
          [ 0.9958,  0.9819,  0.9943,  ...,  0.9886,  0.7867,  0.8813],
          ...,
          [ 0.8657,  0.8557,  0.9216,  ...,  0.5473,  0.6781,  0.3485],
          [ 0.9106,  0.9624,  0.9722,  ...,  0.3206,  0.5871,  0.3211],
          [ 0.9203,  0.9208,  0.9356,  ...,  0.6832,  0.5348,  0.6569]],
         [[ 0.8229,  0.9666,  0.9705,  ...,  0.8651,  0.8888,  0.7792],
          [ 0.9981,  0.4096,  0.9509,  ...,  0.8171,  0.7152,  0.7625],
          [ 0.8600,  0.2009,  0.9777,  ..., -0.3435,  0.6818,  0.4465],
          ...,
          [ 0.7644,  0.8660,  0.0484,  ...,  0.5705,  0.2402,  0.4928],
          [ 0.9178,  0.2241,  0.9302,  ...,  0.1202,  0.3962,  0.3906],
          [ 0.9333,  0.9377,  0.7509,  ...,  0.5403,  0.1674,  0.2894]]],
        [[[ 0.9975,  0.9635,  0.9921,  ...,  0.7061,  0.9528,  0.9340],
          [ 0.9991,  0.8895,  0.9916,  ...,  0.9687,  0.9760,  0.9519],
          [ 0.9902,  0.4367,  0.9414,  ...,  0.8870,  0.9675,  0.7900],
          ...,
          [ 0.9432,  0.6360,  0.9738,  ...,  0.5223,  0.6142,  0.6494],
          [ 0.9548,  0.9273,  0.9202,  ...,  0.8706,  0.8379,  0.8185],
          [ 0.9706,  0.8781,  0.9316,  ...,  0.6375,  0.5090,  0.4694]],
         [[ 0.9999,  0.9990,  0.9970,  ...,  0.9426,  0.9842,  0.9441],
          [ 0.9986,  0.8288,  0.8434,  ...,  0.8339,  0.8585,  0.6652],
          [ 0.9621,  0.9760,  0.9915,  ...,  0.9444,  0.9740,  0.9310],
          ...,
          [ 0.8318,  0.8166,  0.9962,  ...,  0.1731,  0.3048,  0.3647],
          [ 0.9950,  0.9923,  0.9847,  ...,  0.6719,  0.4143,  0.5522],
          [ 0.8452,  0.8813,  0.9715,  ...,  0.2219,  0.2726,  0.3833]],
         [[ 0.9480,  0.9940,  0.9304,  ...,  0.9543,  0.9187,  0.4216],
          [ 0.9937,  0.8942,  0.9948,  ...,  0.9159,  0.9346,  0.9394],
          [ 0.7982,  0.8512,  0.9719,  ...,  0.9824, -0.4602,  0.7529],
          ...,
          [ 0.9823,  0.4915,  0.6438,  ...,  0.1369,  0.3325,  0.2950],
          [ 0.9560,  0.8848,  0.9830,  ...,  0.7563,  0.7754,  0.6239],
          [ 0.5129,  0.8208, -0.1353,  ...,  0.4658,  0.3017,  0.4382]],
         ...,
         [[ 0.8894,  0.9884,  0.9968,  ...,  0.9576,  0.9690,  0.8581],
          [ 0.9760,  0.9876,  0.9494,  ...,  0.9901,  0.9001,  0.9854],
          [ 0.2801,  0.9455,  0.7653,  ...,  0.9909, -0.1823,  0.4334],
          ...,
          [ 0.8275,  0.9934,  0.9447,  ...,  0.6660,  0.2187,  0.6455],
          [ 0.8893,  0.3780,  0.8176,  ...,  0.5221,  0.4717,  0.6163],
          [ 0.9404,  0.9742,  0.3471,  ...,  0.5706,  0.6634,  0.6463]],
         [[ 0.8020,  0.9770,  0.9897,  ...,  0.9942,  0.7583,  0.9144],
          [ 0.9896,  0.9294,  0.9612,  ...,  0.4394,  0.6759,  0.9615],
          [ 0.9983,  0.9784,  0.9978,  ...,  0.9947,  0.8677,  0.9374],
          ...,
          [ 0.7361,  0.7697,  0.9373,  ...,  0.7371,  0.8553,  0.5071],
          [ 0.8894,  0.9520,  0.9634,  ...,  0.4115,  0.7955,  0.5336],
          [ 0.9232,  0.9535,  0.9400,  ...,  0.8619,  0.7594,  0.7819]],
         [[ 0.8136,  0.9779,  0.9919,  ...,  0.9297,  0.9626,  0.8581],
          [ 0.9978,  0.2690,  0.9309,  ...,  0.9154,  0.7481,  0.7796],
          [ 0.8776,  0.1565,  0.9910,  ..., -0.3409,  0.7685,  0.6336],
          ...,
          [ 0.6738,  0.8773, -0.1934,  ...,  0.6663,  0.3422,  0.6431],
          [ 0.9290,  0.2813,  0.9411,  ...,  0.3846,  0.5874,  0.5877],
          [ 0.9111,  0.9254,  0.6904,  ...,  0.6617,  0.1469,  0.4306]]],
        [[[ 0.9967,  0.9514,  0.9855,  ...,  0.7126,  0.8916,  0.9026],
          [ 0.9983,  0.9058,  0.9866,  ...,  0.9511,  0.9645,  0.9365],
          [ 0.9900,  0.3712,  0.9413,  ...,  0.8108,  0.9292,  0.7064],
          ...,
          [ 0.9418,  0.5476,  0.9665,  ...,  0.3509,  0.5294,  0.5188],
          [ 0.9631,  0.9377,  0.9231,  ...,  0.7345,  0.7225,  0.7146],
          [ 0.9666,  0.8500,  0.9087,  ...,  0.5075,  0.3711,  0.3075]],
         [[ 0.9995,  0.9974,  0.9944,  ...,  0.8640,  0.9696,  0.9106],
          [ 0.9945,  0.8160,  0.8059,  ...,  0.7464,  0.7683,  0.6180],
          [ 0.9429,  0.9568,  0.9808,  ...,  0.8543,  0.9583,  0.8896],
          ...,
          [ 0.7711,  0.7898,  0.9941,  ...,  0.0521,  0.1772,  0.1828],
          [ 0.9937,  0.9823,  0.9833,  ...,  0.5086,  0.2809,  0.3547],
          [ 0.8476,  0.8390,  0.9730,  ...,  0.0630,  0.0830,  0.2342]],
         [[ 0.9205,  0.9930,  0.9398,  ...,  0.9072,  0.8623,  0.3653],
          [ 0.9855,  0.8988,  0.9917,  ...,  0.8626,  0.9157,  0.8943],
          [ 0.8217,  0.7883,  0.9766,  ...,  0.9745, -0.3896,  0.6966],
          ...,
          [ 0.9712,  0.4661,  0.6257,  ...,  0.0336,  0.2332,  0.1734],
          [ 0.9570,  0.8522,  0.9848,  ...,  0.6103,  0.6975,  0.5831],
          [ 0.5202,  0.7471, -0.1653,  ...,  0.3073,  0.2441,  0.2569]],
         ...,
         [[ 0.8915,  0.9833,  0.9950,  ...,  0.9402,  0.9346,  0.8512],
          [ 0.9715,  0.9908,  0.9478,  ...,  0.9799,  0.8404,  0.9740],
          [ 0.4533,  0.9598,  0.7221,  ...,  0.9834, -0.0599,  0.3615],
          ...,
          [ 0.8331,  0.9901,  0.9277,  ...,  0.4999,  0.1413,  0.5084],
          [ 0.8720,  0.4991,  0.8014,  ...,  0.4461,  0.3883,  0.4608],
          [ 0.9306,  0.9703,  0.3672,  ...,  0.4263,  0.5399,  0.4940]],
         [[ 0.7128,  0.9737,  0.9850,  ...,  0.9889,  0.7607,  0.8955],
          [ 0.9899,  0.9348,  0.9613,  ...,  0.3823,  0.7122,  0.9375],
          [ 0.9975,  0.9803,  0.9966,  ...,  0.9915,  0.8157,  0.9082],
          ...,
          [ 0.8332,  0.8356,  0.9169,  ...,  0.5953,  0.7283,  0.3829],
          [ 0.8975,  0.9602,  0.9697,  ...,  0.3288,  0.6533,  0.3780],
          [ 0.9196,  0.9373,  0.9404,  ...,  0.7240,  0.5803,  0.6930]],
         [[ 0.8217,  0.9686,  0.9814,  ...,  0.9020,  0.9226,  0.8273],
          [ 0.9981,  0.3833,  0.9534,  ...,  0.8599,  0.7499,  0.7785],
          [ 0.8748,  0.2330,  0.9844,  ..., -0.3453,  0.7334,  0.5166],
          ...,
          [ 0.6940,  0.8726, -0.0102,  ...,  0.6010,  0.2711,  0.5362],
          [ 0.9273,  0.2122,  0.9396,  ...,  0.1582,  0.4358,  0.4378],
          [ 0.9211,  0.9354,  0.7290,  ...,  0.5777,  0.1728,  0.3321]]],
        [[[ 0.9990,  0.9700,  0.9970,  ...,  0.8108,  0.9709,  0.9458],
          [ 0.9995,  0.9300,  0.9921,  ...,  0.9871,  0.9824,  0.9667],
          [ 0.9946,  0.3941,  0.9606,  ...,  0.9043,  0.9839,  0.8405],
          ...,
          [ 0.9435,  0.5065,  0.9699,  ...,  0.4746,  0.6090,  0.6208],
          [ 0.9578,  0.9197,  0.9122,  ...,  0.8489,  0.8104,  0.8114],
          [ 0.9675,  0.8775,  0.9167,  ...,  0.5994,  0.5157,  0.4518]],
         [[ 0.9999,  0.9995,  0.9981,  ...,  0.9532,  0.9906,  0.9588],
          [ 0.9993,  0.8919,  0.8748,  ...,  0.8593,  0.9145,  0.7381],
          [ 0.9705,  0.9788,  0.9969,  ...,  0.9634,  0.9889,  0.9425],
          ...,
          [ 0.7979,  0.8220,  0.9958,  ...,  0.1692,  0.2783,  0.3871],
          [ 0.9936,  0.9903,  0.9856,  ...,  0.5792,  0.3977,  0.5412],
          [ 0.8282,  0.8754,  0.9743,  ...,  0.2393,  0.2492,  0.3844]],
         [[ 0.9625,  0.9961,  0.9211,  ...,  0.9734,  0.9448,  0.4758],
          [ 0.9971,  0.9269,  0.9970,  ...,  0.9500,  0.9416,  0.9583],
          [ 0.8421,  0.9122,  0.9741,  ...,  0.9906, -0.4697,  0.8280],
          ...,
          [ 0.9837,  0.4498,  0.6574,  ...,  0.1491,  0.3451,  0.2676],
          [ 0.9507,  0.8956,  0.9802,  ...,  0.7268,  0.7122,  0.6060],
          [ 0.5366,  0.8140, -0.1584,  ...,  0.4879,  0.2965,  0.4568]],
         ...,
         [[ 0.9405,  0.9941,  0.9980,  ...,  0.9770,  0.9880,  0.8811],
          [ 0.9902,  0.9911,  0.9698,  ...,  0.9964,  0.9409,  0.9910],
          [ 0.1747,  0.9642,  0.6856,  ...,  0.9954, -0.1751,  0.4466],
          ...,
          [ 0.8437,  0.9929,  0.9489,  ...,  0.5921,  0.2371,  0.5655],
          [ 0.8821,  0.2982,  0.8245,  ...,  0.4813,  0.4902,  0.5686],
          [ 0.9308,  0.9704,  0.3558,  ...,  0.5487,  0.6231,  0.6214]],
         [[ 0.8762,  0.9854,  0.9940,  ...,  0.9972,  0.8379,  0.9387],
          [ 0.9922,  0.9348,  0.9626,  ...,  0.4185,  0.7089,  0.9687],
          [ 0.9985,  0.9815,  0.9986,  ...,  0.9967,  0.9138,  0.9565],
          ...,
          [ 0.7152,  0.7398,  0.9417,  ...,  0.7167,  0.8346,  0.4749],
          [ 0.8717,  0.9515,  0.9630,  ...,  0.4099,  0.7445,  0.4697],
          [ 0.9123,  0.9443,  0.9439,  ...,  0.8571,  0.7283,  0.7546]],
         [[ 0.8395,  0.9801,  0.9954,  ...,  0.9569,  0.9761,  0.9170],
          [ 0.9985,  0.2370,  0.9547,  ...,  0.9568,  0.7591,  0.8505],
          [ 0.9182,  0.0891,  0.9944,  ..., -0.2606,  0.7540,  0.7306],
          ...,
          [ 0.6320,  0.8731, -0.1847,  ...,  0.7016,  0.3112,  0.6352],
          [ 0.9237,  0.1387,  0.9240,  ...,  0.3036,  0.5800,  0.5491],
          [ 0.8777,  0.9046,  0.6754,  ...,  0.6599,  0.1261,  0.3860]]]],
       device='cuda:0', grad_fn=<TanhBackward0>)), ('rec_B', tensor([[[[0.9993, 0.9968, 0.9985,  ..., 0.9921, 0.9899, 0.9786],
          [0.9962, 0.9985, 0.9961,  ..., 0.9915, 0.9807, 0.9964],
          [0.9986, 0.9968, 0.9976,  ..., 0.9857, 0.9871, 0.9800],
          ...,
          [0.9778, 0.9655, 0.9765,  ..., 0.9845, 0.9733, 0.9659],
          [0.9872, 0.9815, 0.9681,  ..., 0.9607, 0.9766, 0.9073],
          [0.9895, 0.9875, 0.9880,  ..., 0.9885, 0.9135, 0.9733]],
         [[0.9992, 0.9974, 0.9986,  ..., 0.9923, 0.9918, 0.9977],
          [0.9984, 0.9912, 0.9963,  ..., 0.9882, 0.9945, 0.9956],
          [0.9983, 0.9979, 0.9975,  ..., 0.9963, 0.9945, 0.9811],
          ...,
          [0.9921, 0.9850, 0.9958,  ..., 0.9902, 0.9939, 0.9887],
          [0.9862, 0.9904, 0.9976,  ..., 0.9798, 0.9931, 0.9837],
          [0.9800, 0.9975, 0.9886,  ..., 0.9926, 0.9820, 0.9843]],
         [[0.9995, 0.9993, 0.9977,  ..., 0.9953, 0.9929, 0.9920],
          [0.9998, 0.9980, 0.9997,  ..., 0.9888, 0.9978, 0.9927],
          [0.9994, 0.9996, 0.9977,  ..., 0.9890, 0.9961, 0.9910],
          ...,
          [0.9972, 0.9882, 0.9905,  ..., 0.9939, 0.9891, 0.9804],
          [0.9950, 0.9872, 0.9907,  ..., 0.9922, 0.9938, 0.9786],
          [0.9928, 0.9861, 0.9932,  ..., 0.9864, 0.9928, 0.9918]]],
        [[[0.9992, 0.9981, 0.9989,  ..., 0.9884, 0.9765, 0.9745],
          [0.9950, 0.9985, 0.9973,  ..., 0.9882, 0.9702, 0.9923],
          [0.9991, 0.9950, 0.9979,  ..., 0.9843, 0.9751, 0.9670],
          ...,
          [0.9741, 0.9795, 0.9864,  ..., 0.9774, 0.9621, 0.9541],
          [0.9849, 0.9921, 0.9528,  ..., 0.9461, 0.9714, 0.9066],
          [0.9917, 0.9915, 0.9863,  ..., 0.9869, 0.8972, 0.9602]],
         [[0.9996, 0.9986, 0.9988,  ..., 0.9858, 0.9880, 0.9952],
          [0.9975, 0.9933, 0.9960,  ..., 0.9691, 0.9867, 0.9848],
          [0.9988, 0.9976, 0.9984,  ..., 0.9940, 0.9916, 0.9759],
          ...,
          [0.9933, 0.9848, 0.9934,  ..., 0.9759, 0.9902, 0.9749],
          [0.9879, 0.9902, 0.9984,  ..., 0.9733, 0.9812, 0.9750],
          [0.9855, 0.9973, 0.9887,  ..., 0.9870, 0.9691, 0.9766]],
         [[0.9993, 0.9993, 0.9985,  ..., 0.9852, 0.9891, 0.9892],
          [0.9996, 0.9973, 0.9997,  ..., 0.9767, 0.9942, 0.9805],
          [0.9993, 0.9996, 0.9973,  ..., 0.9893, 0.9916, 0.9915],
          ...,
          [0.9972, 0.9926, 0.9930,  ..., 0.9881, 0.9816, 0.9579],
          [0.9964, 0.9925, 0.9919,  ..., 0.9808, 0.9873, 0.9724],
          [0.9955, 0.9845, 0.9897,  ..., 0.9807, 0.9872, 0.9858]]],
        [[[0.9991, 0.9980, 0.9987,  ..., 0.9910, 0.9873, 0.9783],
          [0.9971, 0.9988, 0.9967,  ..., 0.9906, 0.9736, 0.9955],
          [0.9988, 0.9965, 0.9979,  ..., 0.9860, 0.9878, 0.9773],
          ...,
          [0.9733, 0.9645, 0.9815,  ..., 0.9819, 0.9708, 0.9642],
          [0.9857, 0.9831, 0.9638,  ..., 0.9566, 0.9730, 0.9086],
          [0.9908, 0.9885, 0.9834,  ..., 0.9883, 0.9038, 0.9703]],
         [[0.9995, 0.9974, 0.9987,  ..., 0.9897, 0.9892, 0.9973],
          [0.9986, 0.9926, 0.9970,  ..., 0.9853, 0.9928, 0.9941],
          [0.9984, 0.9979, 0.9976,  ..., 0.9950, 0.9933, 0.9787],
          ...,
          [0.9925, 0.9860, 0.9952,  ..., 0.9889, 0.9933, 0.9872],
          [0.9854, 0.9899, 0.9979,  ..., 0.9789, 0.9911, 0.9799],
          [0.9761, 0.9977, 0.9891,  ..., 0.9917, 0.9813, 0.9825]],
         [[0.9997, 0.9993, 0.9982,  ..., 0.9939, 0.9916, 0.9902],
          [0.9998, 0.9983, 0.9997,  ..., 0.9873, 0.9967, 0.9908],
          [0.9994, 0.9997, 0.9977,  ..., 0.9901, 0.9954, 0.9904],
          ...,
          [0.9969, 0.9905, 0.9887,  ..., 0.9927, 0.9878, 0.9771],
          [0.9949, 0.9890, 0.9904,  ..., 0.9916, 0.9925, 0.9768],
          [0.9925, 0.9866, 0.9911,  ..., 0.9851, 0.9922, 0.9906]]],
        [[[0.9991, 0.9974, 0.9987,  ..., 0.9887, 0.9796, 0.9747],
          [0.9956, 0.9986, 0.9977,  ..., 0.9891, 0.9682, 0.9930],
          [0.9990, 0.9945, 0.9981,  ..., 0.9842, 0.9765, 0.9658],
          ...,
          [0.9773, 0.9765, 0.9876,  ..., 0.9775, 0.9630, 0.9560],
          [0.9867, 0.9918, 0.9590,  ..., 0.9499, 0.9727, 0.9012],
          [0.9928, 0.9909, 0.9851,  ..., 0.9868, 0.9036, 0.9610]],
         [[0.9995, 0.9982, 0.9985,  ..., 0.9878, 0.9866, 0.9954],
          [0.9978, 0.9929, 0.9962,  ..., 0.9705, 0.9886, 0.9858],
          [0.9986, 0.9981, 0.9980,  ..., 0.9932, 0.9907, 0.9739],
          ...,
          [0.9946, 0.9873, 0.9942,  ..., 0.9782, 0.9901, 0.9765],
          [0.9880, 0.9905, 0.9983,  ..., 0.9728, 0.9834, 0.9748],
          [0.9849, 0.9974, 0.9888,  ..., 0.9876, 0.9731, 0.9781]],
         [[0.9993, 0.9992, 0.9985,  ..., 0.9894, 0.9895, 0.9884],
          [0.9997, 0.9969, 0.9998,  ..., 0.9771, 0.9947, 0.9825],
          [0.9994, 0.9996, 0.9974,  ..., 0.9906, 0.9920, 0.9916],
          ...,
          [0.9974, 0.9926, 0.9928,  ..., 0.9879, 0.9831, 0.9596],
          [0.9962, 0.9921, 0.9912,  ..., 0.9836, 0.9875, 0.9722],
          [0.9953, 0.9864, 0.9900,  ..., 0.9809, 0.9885, 0.9875]]],
        [[[0.9990, 0.9938, 0.9978,  ..., 0.9891, 0.9871, 0.9779],
          [0.9971, 0.9973, 0.9970,  ..., 0.9889, 0.9797, 0.9948],
          [0.9976, 0.9954, 0.9962,  ..., 0.9838, 0.9785, 0.9807],
          ...,
          [0.9680, 0.9677, 0.9712,  ..., 0.9814, 0.9678, 0.9620],
          [0.9831, 0.9780, 0.9641,  ..., 0.9489, 0.9748, 0.9046],
          [0.9882, 0.9857, 0.9860,  ..., 0.9878, 0.9013, 0.9683]],
         [[0.9990, 0.9959, 0.9977,  ..., 0.9918, 0.9851, 0.9963],
          [0.9983, 0.9887, 0.9935,  ..., 0.9857, 0.9923, 0.9956],
          [0.9983, 0.9960, 0.9963,  ..., 0.9954, 0.9929, 0.9776],
          ...,
          [0.9898, 0.9793, 0.9946,  ..., 0.9864, 0.9925, 0.9829],
          [0.9835, 0.9885, 0.9963,  ..., 0.9782, 0.9881, 0.9808],
          [0.9785, 0.9970, 0.9864,  ..., 0.9895, 0.9808, 0.9814]],
         [[0.9994, 0.9989, 0.9978,  ..., 0.9923, 0.9906, 0.9891],
          [0.9998, 0.9962, 0.9997,  ..., 0.9891, 0.9976, 0.9913],
          [0.9993, 0.9995, 0.9975,  ..., 0.9825, 0.9939, 0.9895],
          ...,
          [0.9971, 0.9883, 0.9911,  ..., 0.9910, 0.9860, 0.9721],
          [0.9949, 0.9850, 0.9884,  ..., 0.9880, 0.9917, 0.9729],
          [0.9919, 0.9828, 0.9892,  ..., 0.9832, 0.9910, 0.9892]]]],
       device='cuda:0', grad_fn=<TanhBackward0>))])
vim shape: (8,)
after mod vim shape: (8,)
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/PIL/Image.py:946: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  "Palette images with Transparency expressed in bytes should be "
/fs02/zd26/collage_main/Tin2/cycleGAN_pix2pix/.venv/lib/python3.7/site-packages/visdom/__init__.py:366: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array(a)